{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Определение стоимости автомобилей"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сервис по продаже автомобилей с пробегом «Не бит, не крашен» разрабатывает приложение для привлечения новых клиентов. В нём можно быстро узнать рыночную стоимость своего автомобиля. В вашем распоряжении исторические данные: технические характеристики, комплектации и цены автомобилей. Вам нужно построить модель для определения стоимости. \n",
    "\n",
    "Заказчику важны:\n",
    "\n",
    "- качество предсказания;\n",
    "- скорость предсказания;\n",
    "- время обучения."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Подготовка данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Загрузим необходимые для работы библиотеки."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting ydata_profiling\n",
      "  Downloading ydata_profiling-4.6.4-py2.py3-none-any.whl (357 kB)\n",
      "\u001b[K     |████████████████████████████████| 357 kB 1.1 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: numba<0.59.0,>=0.56.0 in /opt/conda/lib/python3.9/site-packages (from ydata_profiling) (0.56.0)\n",
      "Requirement already satisfied: statsmodels<1,>=0.13.2 in /opt/conda/lib/python3.9/site-packages (from ydata_profiling) (0.13.2)\n",
      "Requirement already satisfied: matplotlib<3.9,>=3.2 in /opt/conda/lib/python3.9/site-packages (from ydata_profiling) (3.3.4)\n",
      "Requirement already satisfied: numpy<1.26,>=1.16.0 in /opt/conda/lib/python3.9/site-packages (from ydata_profiling) (1.21.1)\n",
      "Requirement already satisfied: pandas!=1.4.0,<3,>1.1 in /opt/conda/lib/python3.9/site-packages (from ydata_profiling) (1.2.4)\n",
      "Collecting pydantic>=2\n",
      "  Downloading pydantic-2.6.2-py3-none-any.whl (394 kB)\n",
      "\u001b[K     |████████████████████████████████| 394 kB 22.8 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting dacite>=1.8\n",
      "  Downloading dacite-1.8.1-py3-none-any.whl (14 kB)\n",
      "Requirement already satisfied: scipy<1.12,>=1.4.1 in /opt/conda/lib/python3.9/site-packages (from ydata_profiling) (1.9.1)\n",
      "Requirement already satisfied: jinja2<3.2,>=2.11.1 in /opt/conda/lib/python3.9/site-packages (from ydata_profiling) (3.0.1)\n",
      "Collecting multimethod<2,>=1.4\n",
      "  Downloading multimethod-1.11.1-py3-none-any.whl (10 kB)\n",
      "Collecting imagehash==4.3.1\n",
      "  Downloading ImageHash-4.3.1-py2.py3-none-any.whl (296 kB)\n",
      "\u001b[K     |████████████████████████████████| 296 kB 74.3 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting visions[type_image_path]==0.7.5\n",
      "  Downloading visions-0.7.5-py3-none-any.whl (102 kB)\n",
      "\u001b[K     |████████████████████████████████| 102 kB 41.2 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting wordcloud>=1.9.1\n",
      "  Downloading wordcloud-1.9.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (513 kB)\n",
      "\u001b[K     |████████████████████████████████| 513 kB 74.5 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: requests<3,>=2.24.0 in /opt/conda/lib/python3.9/site-packages (from ydata_profiling) (2.25.1)\n",
      "Requirement already satisfied: seaborn<0.13,>=0.10.1 in /opt/conda/lib/python3.9/site-packages (from ydata_profiling) (0.11.1)\n",
      "Requirement already satisfied: tqdm<5,>=4.48.2 in /opt/conda/lib/python3.9/site-packages (from ydata_profiling) (4.61.2)\n",
      "Collecting htmlmin==0.1.12\n",
      "  Downloading htmlmin-0.1.12.tar.gz (19 kB)\n",
      "Collecting phik<0.13,>=0.11.1\n",
      "  Downloading phik-0.12.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (686 kB)\n",
      "\u001b[K     |████████████████████████████████| 686 kB 80.7 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting typeguard<5,>=4.1.2\n",
      "  Downloading typeguard-4.1.5-py3-none-any.whl (34 kB)\n",
      "Requirement already satisfied: PyYAML<6.1,>=5.0.0 in /opt/conda/lib/python3.9/site-packages (from ydata_profiling) (6.0)\n",
      "Requirement already satisfied: pillow in /opt/conda/lib/python3.9/site-packages (from imagehash==4.3.1->ydata_profiling) (8.4.0)\n",
      "Collecting PyWavelets\n",
      "  Downloading pywavelets-1.5.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.5 MB)\n",
      "\u001b[K     |████████████████████████████████| 4.5 MB 66.5 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting networkx>=2.4\n",
      "  Downloading networkx-3.2.1-py3-none-any.whl (1.6 MB)\n",
      "\u001b[K     |████████████████████████████████| 1.6 MB 30.2 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: attrs>=19.3.0 in /opt/conda/lib/python3.9/site-packages (from visions[type_image_path]==0.7.5->ydata_profiling) (21.2.0)\n",
      "Collecting tangled-up-in-unicode>=0.0.4\n",
      "  Downloading tangled_up_in_unicode-0.2.0-py3-none-any.whl (4.7 MB)\n",
      "\u001b[K     |████████████████████████████████| 4.7 MB 78.0 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.9/site-packages (from jinja2<3.2,>=2.11.1->ydata_profiling) (2.1.1)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /opt/conda/lib/python3.9/site-packages (from matplotlib<3.9,>=3.2->ydata_profiling) (2.4.7)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.9/site-packages (from matplotlib<3.9,>=3.2->ydata_profiling) (1.4.4)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.9/site-packages (from matplotlib<3.9,>=3.2->ydata_profiling) (0.11.0)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.9/site-packages (from matplotlib<3.9,>=3.2->ydata_profiling) (2.8.1)\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.9/site-packages (from numba<0.59.0,>=0.56.0->ydata_profiling) (49.6.0.post20210108)\n",
      "Requirement already satisfied: llvmlite<0.40,>=0.39.0dev0 in /opt/conda/lib/python3.9/site-packages (from numba<0.59.0,>=0.56.0->ydata_profiling) (0.39.0)\n",
      "Requirement already satisfied: pytz>=2017.3 in /opt/conda/lib/python3.9/site-packages (from pandas!=1.4.0,<3,>1.1->ydata_profiling) (2021.1)\n",
      "Requirement already satisfied: joblib>=0.14.1 in /opt/conda/lib/python3.9/site-packages (from phik<0.13,>=0.11.1->ydata_profiling) (1.1.0)\n",
      "Collecting annotated-types>=0.4.0\n",
      "  Downloading annotated_types-0.6.0-py3-none-any.whl (12 kB)\n",
      "Collecting typing-extensions>=4.6.1\n",
      "  Downloading typing_extensions-4.9.0-py3-none-any.whl (32 kB)\n",
      "Collecting pydantic-core==2.16.3\n",
      "  Downloading pydantic_core-2.16.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.2 MB)\n",
      "\u001b[K     |████████████████████████████████| 2.2 MB 59.9 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.9/site-packages (from python-dateutil>=2.1->matplotlib<3.9,>=3.2->ydata_profiling) (1.16.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.9/site-packages (from requests<3,>=2.24.0->ydata_profiling) (2022.6.15)\n",
      "Requirement already satisfied: chardet<5,>=3.0.2 in /opt/conda/lib/python3.9/site-packages (from requests<3,>=2.24.0->ydata_profiling) (4.0.0)\n",
      "Requirement already satisfied: idna<3,>=2.5 in /opt/conda/lib/python3.9/site-packages (from requests<3,>=2.24.0->ydata_profiling) (2.10)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.9/site-packages (from requests<3,>=2.24.0->ydata_profiling) (1.26.6)\n",
      "Requirement already satisfied: packaging>=21.3 in /opt/conda/lib/python3.9/site-packages (from statsmodels<1,>=0.13.2->ydata_profiling) (21.3)\n",
      "Requirement already satisfied: patsy>=0.5.2 in /opt/conda/lib/python3.9/site-packages (from statsmodels<1,>=0.13.2->ydata_profiling) (0.5.2)\n",
      "Requirement already satisfied: importlib-metadata>=3.6 in /opt/conda/lib/python3.9/site-packages (from typeguard<5,>=4.1.2->ydata_profiling) (4.6.1)\n",
      "Requirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.9/site-packages (from importlib-metadata>=3.6->typeguard<5,>=4.1.2->ydata_profiling) (3.5.0)\n",
      "Collecting numpy<1.26,>=1.16.0\n",
      "  Downloading numpy-1.22.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.8 MB)\n",
      "\u001b[K     |████████████████████████████████| 16.8 MB 75.5 MB/s eta 0:00:01\n",
      "\u001b[?25hBuilding wheels for collected packages: htmlmin\n",
      "  Building wheel for htmlmin (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for htmlmin: filename=htmlmin-0.1.12-py3-none-any.whl size=27085 sha256=e9322247978b0cc3c81cab7532e8ebe1d1472a8afc17a8f90ebb382722ec19b5\n",
      "  Stored in directory: /home/jovyan/.cache/pip/wheels/1d/05/04/c6d7d3b66539d9e659ac6dfe81e2d0fd4c1a8316cc5a403300\n",
      "Successfully built htmlmin\n",
      "Installing collected packages: numpy, typing-extensions, tangled-up-in-unicode, PyWavelets, networkx, multimethod, visions, pydantic-core, imagehash, annotated-types, wordcloud, typeguard, pydantic, phik, htmlmin, dacite, ydata-profiling\n",
      "  Attempting uninstall: numpy\n",
      "    Found existing installation: numpy 1.21.1\n",
      "    Uninstalling numpy-1.21.1:\n",
      "      Successfully uninstalled numpy-1.21.1\n",
      "  Attempting uninstall: typing-extensions\n",
      "    Found existing installation: typing-extensions 4.3.0\n",
      "    Uninstalling typing-extensions-4.3.0:\n",
      "      Successfully uninstalled typing-extensions-4.3.0\n",
      "  Attempting uninstall: pydantic\n",
      "    Found existing installation: pydantic 1.8.2\n",
      "    Uninstalling pydantic-1.8.2:\n",
      "      Successfully uninstalled pydantic-1.8.2\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "thinc 8.0.17 requires pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4, but you have pydantic 2.6.2 which is incompatible.\n",
      "spacy 3.2.0 requires pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4, but you have pydantic 2.6.2 which is incompatible.\u001b[0m\n",
      "Successfully installed PyWavelets-1.5.0 annotated-types-0.6.0 dacite-1.8.1 htmlmin-0.1.12 imagehash-4.3.1 multimethod-1.11.1 networkx-3.2.1 numpy-1.22.4 phik-0.12.4 pydantic-2.6.2 pydantic-core-2.16.3 tangled-up-in-unicode-0.2.0 typeguard-4.1.5 typing-extensions-4.9.0 visions-0.7.5 wordcloud-1.9.3 ydata-profiling-4.6.4\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install ydata_profiling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import lightgbm as lgb\n",
    "import matplotlib.pyplot as plt\n",
    "from ydata_profiling import ProfileReport\n",
    "import time\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from catboost import CatBoostRegressor, Pool\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import seaborn as sns\n",
    "from sklearn.dummy import DummyRegressor\n",
    "from IPython.core.display import display, HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>.container { width:90% !important; }</style>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(HTML(\"<style>.container { width:90% !important; }</style>\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Загрузим датафрейм в переменную df."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/datasets/autos.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим ProfileReport по исходным данным."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ad16bb7658f249aa8bc137a0477c78bb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Summarize dataset:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "642660fbdef84a89b2aa8eb3b40f18f8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generate report structure:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "ValueError",
     "evalue": "Only supported for TrueType fonts",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    343\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 345\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/profile_report.py\u001b[0m in \u001b[0;36m_repr_html_\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    533\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_repr_html_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    534\u001b[0m         \u001b[0;34m\"\"\"The ipython notebook widgets user interface gets called by the jupyter notebook.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 535\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_notebook_iframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    536\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    537\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__repr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/profile_report.py\u001b[0m in \u001b[0;36mto_notebook_iframe\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    513\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcatch_warnings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    514\u001b[0m             \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msimplefilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 515\u001b[0;31m             \u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mget_notebook_iframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    516\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    517\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mto_widgets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/report/presentation/flavours/widget/notebook.py\u001b[0m in \u001b[0;36mget_notebook_iframe\u001b[0;34m(config, profile)\u001b[0m\n\u001b[1;32m     73\u001b[0m         \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_notebook_iframe_src\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprofile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mattribute\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mIframeAttribute\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msrcdoc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m         \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_notebook_iframe_srcdoc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprofile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m         raise ValueError(\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/report/presentation/flavours/widget/notebook.py\u001b[0m in \u001b[0;36mget_notebook_iframe_srcdoc\u001b[0;34m(config, profile)\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0mwidth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnotebook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miframe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwidth\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0mheight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnotebook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miframe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheight\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m     \u001b[0msrc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhtml\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mescape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprofile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_html\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0miframe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf'<iframe width=\"{width}\" height=\"{height}\" srcdoc=\"{src}\" frameborder=\"0\" allowfullscreen></iframe>'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/profile_report.py\u001b[0m in \u001b[0;36mto_html\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    483\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m         \"\"\"\n\u001b[0;32m--> 485\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhtml\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    486\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    487\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mto_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/profile_report.py\u001b[0m in \u001b[0;36mhtml\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    281\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mhtml\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_html\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 283\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_html\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_render_html\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_html\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/profile_report.py\u001b[0m in \u001b[0;36m_render_html\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    398\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mydata_profiling\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreport\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpresentation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflavours\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mHTMLReport\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    399\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 400\u001b[0;31m         \u001b[0mreport\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreport\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    401\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    402\u001b[0m         with tqdm(\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/profile_report.py\u001b[0m in \u001b[0;36mreport\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    275\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mreport\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mRoot\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    276\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_report\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 277\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_report\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_report_structure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescription_set\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    278\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_report\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    279\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/report/structure/report.py\u001b[0m in \u001b[0;36mget_report_structure\u001b[0;34m(config, summary)\u001b[0m\n\u001b[1;32m    385\u001b[0m                     \u001b[0mitems\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    386\u001b[0m                     item=Container(\n\u001b[0;32m--> 387\u001b[0;31m                         \u001b[0mrender_variables_section\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msummary\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    388\u001b[0m                         \u001b[0msequence_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"accordion\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    389\u001b[0m                         \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Variables\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/report/structure/report.py\u001b[0m in \u001b[0;36mrender_variables_section\u001b[0;34m(config, dataframe_summary)\u001b[0m\n\u001b[1;32m    160\u001b[0m             \u001b[0mvariable_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msummary\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"type\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m         \u001b[0mrender_map_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrender_map\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvariable_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrender_map\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Unsupported\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 162\u001b[0;31m         \u001b[0mtemplate_variables\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrender_map_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtemplate_variables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m         \u001b[0;31m# Ignore these\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/report/structure/variables/render_text.py\u001b[0m in \u001b[0;36mrender_text\u001b[0;34m(config, summary)\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mwords\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"word_counts\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msummary\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m         mini_wordcloud = Image(\n\u001b[0;32m---> 81\u001b[0;31m             \u001b[0mplot_word_cloud\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msummary\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"word_counts\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     82\u001b[0m             \u001b[0mimage_format\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimage_format\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m             \u001b[0malt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Mini wordcloud\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/contextlib.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(*args, **kwds)\u001b[0m\n\u001b[1;32m     77\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_recreate_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 79\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     80\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/visualisation/plot.py\u001b[0m in \u001b[0;36mplot_word_cloud\u001b[0;34m(config, word_counts)\u001b[0m\n\u001b[1;32m    125\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0mmanage_matplotlib_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mplot_word_cloud\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mSettings\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mword_counts\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m     \u001b[0m_plot_word_cloud\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseries\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mword_counts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mplot_360_n0sc0pe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/ydata_profiling/visualisation/plot.py\u001b[0m in \u001b[0;36m_plot_word_cloud\u001b[0;34m(series, figsize)\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseries_data\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0mword_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mseries_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m         wordcloud = WordCloud(\n\u001b[0m\u001b[1;32m     39\u001b[0m             \u001b[0mbackground_color\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"white\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m123\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m300\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m200\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscale\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m         ).generate_from_frequencies(word_dict)\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/wordcloud/wordcloud.py\u001b[0m in \u001b[0;36mgenerate_from_frequencies\u001b[0;34m(self, frequencies, max_font_size)\u001b[0m\n\u001b[1;32m    451\u001b[0m                 \u001b[0mfont_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheight\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    452\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 453\u001b[0;31m                 self.generate_from_frequencies(dict(frequencies[:2]),\n\u001b[0m\u001b[1;32m    454\u001b[0m                                                max_font_size=self.height)\n\u001b[1;32m    455\u001b[0m                 \u001b[0;31m# find font sizes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/wordcloud/wordcloud.py\u001b[0m in \u001b[0;36mgenerate_from_frequencies\u001b[0;34m(self, frequencies, max_font_size)\u001b[0m\n\u001b[1;32m    509\u001b[0m                     font, orientation=orientation)\n\u001b[1;32m    510\u001b[0m                 \u001b[0;31m# get size of resulting text\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 511\u001b[0;31m                 \u001b[0mbox_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtextbbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mword\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfont\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtransposed_font\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manchor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"lt\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    512\u001b[0m                 \u001b[0;31m# find possible places using integral image:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    513\u001b[0m                 result = occupancy.sample_position(box_size[3] + self.margin,\n",
      "\u001b[0;32m/opt/conda/lib/python3.9/site-packages/PIL/ImageDraw.py\u001b[0m in \u001b[0;36mtextbbox\u001b[0;34m(self, xy, text, font, anchor, spacing, align, direction, features, language, stroke_width, embedded_color)\u001b[0m\n\u001b[1;32m    649\u001b[0m             \u001b[0mfont\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetfont\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    650\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfont\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mImageFont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFreeTypeFont\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 651\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Only supported for TrueType fonts\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    652\u001b[0m         \u001b[0mmode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"RGBA\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0membedded_color\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfontmode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    653\u001b[0m         bbox = font.getbbox(\n",
      "\u001b[0;31mValueError\u001b[0m: Only supported for TrueType fonts"
     ]
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ProfileReport(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Запишем размер изначального датафрейма в переменную, чтобы позже выяснить процент удаленных данных."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "size_before = df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на гистограммы по данным отдельно."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1440 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(figsize=(15, 20))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 354369 entries, 0 to 354368\n",
      "Data columns (total 16 columns):\n",
      " #   Column             Non-Null Count   Dtype \n",
      "---  ------             --------------   ----- \n",
      " 0   DateCrawled        354369 non-null  object\n",
      " 1   Price              354369 non-null  int64 \n",
      " 2   VehicleType        316879 non-null  object\n",
      " 3   RegistrationYear   354369 non-null  int64 \n",
      " 4   Gearbox            334536 non-null  object\n",
      " 5   Power              354369 non-null  int64 \n",
      " 6   Model              334664 non-null  object\n",
      " 7   Kilometer          354369 non-null  int64 \n",
      " 8   RegistrationMonth  354369 non-null  int64 \n",
      " 9   FuelType           321474 non-null  object\n",
      " 10  Brand              354369 non-null  object\n",
      " 11  Repaired           283215 non-null  object\n",
      " 12  DateCreated        354369 non-null  object\n",
      " 13  NumberOfPictures   354369 non-null  int64 \n",
      " 14  PostalCode         354369 non-null  int64 \n",
      " 15  LastSeen           354369 non-null  object\n",
      "dtypes: int64(7), object(9)\n",
      "memory usage: 43.3+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на уникальные значения столбца 'Kilometer'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([150000, 125000,  90000,  40000,  30000,  70000,   5000, 100000,\n",
       "        60000,  20000,  80000,  50000,  10000])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Kilometer.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Увидим, что данные в столбце посути являются категоральными."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на уникальные данные в столбце 'FuelType'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['petrol', 'gasoline', nan, 'lpg', 'other', 'hybrid', 'cng',\n",
       "       'electric'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.FuelType.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Обозначения Petrol и Gasoline дублируют друг друга."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на значения в столбце 'RegistrationYear'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x1008 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.RegistrationYear[:2016].hist(figsize=(16,14))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1993, 2011, 2004, 2001, 2008, 1995, 1980, 2014, 1998, 2005, 1910,\n",
       "       2016, 2007, 2009, 2002, 2018, 1997, 1990, 2017, 1981, 2003, 1994,\n",
       "       1991, 1984, 2006, 1999, 2012, 2010, 2000, 1992, 2013, 1996, 1985,\n",
       "       1989, 2015, 1982, 1976, 1983, 1973, 1111, 1969, 1971, 1987, 1986,\n",
       "       1988, 1970, 1965, 1945, 1925, 1974, 1979, 1955, 1978, 1972, 1968,\n",
       "       1977, 1961, 1960, 1966, 1975, 1963, 1964, 5000, 1954, 1958, 1967,\n",
       "       1959, 9999, 1956, 3200, 1000, 1941, 8888, 1500, 2200, 4100, 1962,\n",
       "       1929, 1957, 1940, 3000, 2066, 1949, 2019, 1937, 1951, 1800, 1953,\n",
       "       1234, 8000, 5300, 9000, 2900, 6000, 5900, 5911, 1933, 1400, 1950,\n",
       "       4000, 1948, 1952, 1200, 8500, 1932, 1255, 3700, 3800, 4800, 1942,\n",
       "       7000, 1935, 1936, 6500, 1923, 2290, 2500, 1930, 1001, 9450, 1944,\n",
       "       1943, 1934, 1938, 1688, 2800, 1253, 1928, 1919, 5555, 5600, 1600,\n",
       "       2222, 1039, 9996, 1300, 8455, 1931, 1915, 4500, 1920, 1602, 7800,\n",
       "       9229, 1947, 1927, 7100, 8200, 1946, 7500, 3500])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.RegistrationYear.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Данных до 1960 года очень мало. Можно их не учитывать. Так же можно увидеть много выбросов в этих данных. Необходимо удалить все значения больше 2016-го года."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим значения столбца 'Power'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.boxplot(column='Power')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([    0,   190,   163,    75,    69,   102,   109,    50,   125,\n",
       "         101,   105,   140,   115,   131,    60,   136,   160,   231,\n",
       "          90,   118,   193,    99,   113,   218,   122,   129,    70,\n",
       "         306,    95,    61,   177,    80,   170,    55,   143,    64,\n",
       "         286,   232,   150,   156,    82,   155,    54,   185,    87,\n",
       "         180,    86,    84,   224,   235,   200,   178,   265,    77,\n",
       "         110,   144,   120,   116,   184,   126,   204,    88,   194,\n",
       "         305,   197,   179,   250,    45,   313,    41,   165,    98,\n",
       "         130,   114,   211,    56,   201,   213,    58,   107,    83,\n",
       "         174,   100,   220,    85,    73,   192,    68,    66,   299,\n",
       "          74,    52,   147,    65,   310,    71,    97,   239,   203,\n",
       "           5,   300,   103,   258,   320,    63,    81,   148,    44,\n",
       "         145,   230,   280,   260,   104,   188,   333,   186,   117,\n",
       "         141,    59,   132,   234,   158,    39,    92,    51,   135,\n",
       "          53,   209,    43,   146,    67,   106,   166,   276,   344,\n",
       "          72,   249,   237,   245,   111,   326,   279,    23,   138,\n",
       "         175,    96,   226,    26,    37,   301,   334,   128,   133,\n",
       "         124,    33,   219,   241,   167,    94,   182,   196,   238,\n",
       "        1398,   228,   112,    48,   272,   139,  1799,    40,   240,\n",
       "          79,   256,   360,   243,   375,   252,   396,   340,   108,\n",
       "         121,   345,   187,   289,   222,   198,   284,   450,   233,\n",
       "         387,   152,   347,   172,    57,   137,   212,   476,   314,\n",
       "          30,     7,    47,   173,   290,   207,   205,   171,   750,\n",
       "          78,    91,    89,   349,   325,    76,   151,   350,   953,\n",
       "          93,   142,   500,   343,   199,   119,   164,    16,   264,\n",
       "         367,   208,   210,    46,   435,  1001,   225,   127,   176,\n",
       "         161,   603,   307,   354,    35,   206,   771,   355,   273,\n",
       "         223,   255,   123,   154,   149,  7515,  1400,   268,   620,\n",
       "         169,   400,   275,    34,     2,   242,  1779,   285,   162,\n",
       "         328,  1753,   329,   134,   420,   247,   168, 10317,   215,\n",
       "          18,   330,   283,    62,    10,   214,   183,   254,    15,\n",
       "         321,   322,   315,   952,   600,   181,   426,   599,   379,\n",
       "         999,    22,   157,    42,   195,   553,     4,   309,   507,\n",
       "         381,   271,   440,   189,   401,  1111,  2729,    21,   236,\n",
       "        1240,  1704,   521,     1,  1900,   270,    24,   159,   292,\n",
       "         808,   515,  1200,   303,    29,    38,  1993,    14,   216,\n",
       "         610,   504,    49,   267,   331,   363,   261,   385,  1011,\n",
       "         253,   696, 10520,   376,   227,   311,    27,   217,    20,\n",
       "        1999,    11,  1056,    25,   394,    12,   298,   296,  1659,\n",
       "         294,   551,  6920,   246,    17,  1800,  1625,   368,   390,\n",
       "         221,  1367,   259,   606,   327,  2017,  1597,   266,   374,\n",
       "         392,     9,   405,    13,   262,   601,   430,   295,     8,\n",
       "         411,   900,   541,  7512,   382, 10218,  7544,  1102,   287,\n",
       "          19,   751,   297,  1090,   457,   282,   602,   388,     6,\n",
       "        1000,  5411,   335,  1360,   202,  3750,   805,  1062,  1024,\n",
       "       11530,   364,  1796,  5000,   269,   460,  1002,   288,  1780,\n",
       "       12012, 17932,   316,  2005,  1399,   191,   278,  1300,   380,\n",
       "         257,   449,  1256,   153,  1653,   520,   560,   281, 12510,\n",
       "           3,  1500,   386,    32,  1202,  2016,  1436,  1405,   671,\n",
       "         274,  1288,  1055, 10912, 15016,  6226,  1115,   277,  1105,\n",
       "         341,  1223,  2340,  8404,  1968,   338,   445,  1920,   370,\n",
       "         517,  4400, 10710, 10522,  9010,   431,  1164, 11509,   371,\n",
       "        1501,   428, 11635,    36,   304,   348,  1703,  1910,  1995,\n",
       "         579, 10000,   580,   408,    31,  1005,   358,  1403,   489,\n",
       "        5575, 19211,   585,   960,   365,   353,   490,   352,  1801,\n",
       "         346,   550,  3199,   800,  7508,  1312,   357,  1937,   950,\n",
       "        4700,  1600,  3454, 19208,   251,   850,   337,   700,  8011,\n",
       "        2331,  2789,   487,   519,  2461,  6006,  3500,  5815,  6018,\n",
       "        1781,  1503,   612,  1596,   229,  1506,  5809, 15020,  5867,\n",
       "        2172,  1598, 17410,  1363,   584,  1054,   851,  1339,   318,\n",
       "         510,   525,  1700,    28,  1151,   685,  6011,   317,   703,\n",
       "        1771, 15001,   514,   362,   332,   324,  6045,   530,   425,\n",
       "         308,  6010,   475,   903,   640,  2000,   248,   651,  2799,\n",
       "       17011,   505,  1103,  1521,   351, 16051,   398,  9000,  1998,\n",
       "       10311,   409,  1230, 17019, 12684,  8259,  1895,   901,  1317,\n",
       "         871,   909,  2201,  1595,   776, 17700, 11011,  1199,   459,\n",
       "        1162,  1120, 15033,  1896,   339,   361,   574,  6512,   454,\n",
       "         650, 13616,   604,   607, 16312,  1082,   336, 20000,   416,\n",
       "         678,  6012,  1401,  1021,  1870, 13636,  1250,  9710,   323,\n",
       "        1158,  2009,   902,  6062,  1275,   572,   244,   399,  1016,\n",
       "         743,  1221,  2402, 16011,  1362,   544,   645,   907,   702,\n",
       "       12512,  1986,  1003,  1432,  9013,  9011,   442,  1017,  1394,\n",
       "       15017, 10910,  1992,   540,  2018, 11025,  1433,  1701,  2792,\n",
       "        1502,  1239,  1390, 14009,  1160,  1351, 11111,  1783,  9007,\n",
       "         923,  1149,   754,  1988,   402,  2004,  5420,  1793,  1324,\n",
       "         356,  7511,  1299,   293, 19312,  1079,  1689,   998,  1100,\n",
       "        9012,  1933,   508, 16311,   682,  1252,  1922,  7529,   732,\n",
       "        2389,  2200,  1707,  1416,  8500,  1012,   485,  3000, 10110,\n",
       "         421,  4507,  1631,  7518,   377,  1004,  2007,  2598,  1548,\n",
       "        1241])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Power.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В данных в столбце 'Power' присутствуют выбросы. Необходимо их удалить."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на столбцы с пропусками."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DateCrawled</th>\n",
       "      <th>Price</th>\n",
       "      <th>VehicleType</th>\n",
       "      <th>RegistrationYear</th>\n",
       "      <th>Gearbox</th>\n",
       "      <th>Power</th>\n",
       "      <th>Model</th>\n",
       "      <th>Kilometer</th>\n",
       "      <th>RegistrationMonth</th>\n",
       "      <th>FuelType</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Repaired</th>\n",
       "      <th>DateCreated</th>\n",
       "      <th>NumberOfPictures</th>\n",
       "      <th>PostalCode</th>\n",
       "      <th>LastSeen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>306</th>\n",
       "      <td>2016-03-21 14:38:37</td>\n",
       "      <td>200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sonstige_autos</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-03-21 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>6493</td>\n",
       "      <td>2016-03-24 02:47:34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522</th>\n",
       "      <td>2016-03-14 18:40:14</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>volvo</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-03-14 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>25524</td>\n",
       "      <td>2016-03-14 18:40:14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>538</th>\n",
       "      <td>2016-03-15 17:43:21</td>\n",
       "      <td>2600</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>125000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>chevrolet</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-03-15 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>94315</td>\n",
       "      <td>2016-04-06 14:45:44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>552</th>\n",
       "      <td>2016-03-21 10:52:52</td>\n",
       "      <td>50</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1985</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150000</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>trabant</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-03-21 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>69120</td>\n",
       "      <td>2016-03-22 14:50:41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>622</th>\n",
       "      <td>2016-03-16 16:55:09</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1111</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>opel</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-03-16 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>44628</td>\n",
       "      <td>2016-03-20 16:44:37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>353727</th>\n",
       "      <td>2016-03-20 17:56:59</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>bmw</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-03-20 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>42329</td>\n",
       "      <td>2016-04-07 00:46:36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354073</th>\n",
       "      <td>2016-03-19 14:53:26</td>\n",
       "      <td>1750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1995</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100000</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sonstige_autos</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-03-19 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>6188</td>\n",
       "      <td>2016-04-01 01:47:17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354083</th>\n",
       "      <td>2016-03-30 07:54:17</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sonstige_autos</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-03-30 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>6686</td>\n",
       "      <td>2016-04-06 23:46:19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354162</th>\n",
       "      <td>2016-03-07 19:51:14</td>\n",
       "      <td>1500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1995</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-03-07 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>26789</td>\n",
       "      <td>2016-04-03 11:46:59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354365</th>\n",
       "      <td>2016-03-14 17:48:27</td>\n",
       "      <td>2200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20000</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sonstige_autos</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-03-14 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>39576</td>\n",
       "      <td>2016-04-06 00:46:52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2237 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                DateCrawled  Price VehicleType  RegistrationYear Gearbox  \\\n",
       "306     2016-03-21 14:38:37    200         NaN              2009     NaN   \n",
       "522     2016-03-14 18:40:14      0         NaN              2000     NaN   \n",
       "538     2016-03-15 17:43:21   2600         NaN              2005     NaN   \n",
       "552     2016-03-21 10:52:52     50         NaN              1985     NaN   \n",
       "622     2016-03-16 16:55:09      0         NaN              1111     NaN   \n",
       "...                     ...    ...         ...               ...     ...   \n",
       "353727  2016-03-20 17:56:59      1         NaN              2000     NaN   \n",
       "354073  2016-03-19 14:53:26   1750         NaN              1995     NaN   \n",
       "354083  2016-03-30 07:54:17      0         NaN              2000     NaN   \n",
       "354162  2016-03-07 19:51:14   1500         NaN              1995     NaN   \n",
       "354365  2016-03-14 17:48:27   2200         NaN              2005     NaN   \n",
       "\n",
       "        Power Model  Kilometer  RegistrationMonth FuelType           Brand  \\\n",
       "306         0   NaN      10000                  0      NaN  sonstige_autos   \n",
       "522         0   NaN     150000                  0      NaN           volvo   \n",
       "538         0   NaN     125000                  0      NaN       chevrolet   \n",
       "552         0   NaN     150000                 11      NaN         trabant   \n",
       "622         0   NaN       5000                  0      NaN            opel   \n",
       "...       ...   ...        ...                ...      ...             ...   \n",
       "353727      0   NaN     150000                  0      NaN             bmw   \n",
       "354073      0   NaN     100000                 12      NaN  sonstige_autos   \n",
       "354083      0   NaN     150000                  0      NaN  sonstige_autos   \n",
       "354162      0   NaN     150000                  0      NaN      volkswagen   \n",
       "354365      0   NaN      20000                  1      NaN  sonstige_autos   \n",
       "\n",
       "       Repaired          DateCreated  NumberOfPictures  PostalCode  \\\n",
       "306         NaN  2016-03-21 00:00:00                 0        6493   \n",
       "522         NaN  2016-03-14 00:00:00                 0       25524   \n",
       "538         NaN  2016-03-15 00:00:00                 0       94315   \n",
       "552         NaN  2016-03-21 00:00:00                 0       69120   \n",
       "622         NaN  2016-03-16 00:00:00                 0       44628   \n",
       "...         ...                  ...               ...         ...   \n",
       "353727      NaN  2016-03-20 00:00:00                 0       42329   \n",
       "354073      NaN  2016-03-19 00:00:00                 0        6188   \n",
       "354083      NaN  2016-03-30 00:00:00                 0        6686   \n",
       "354162      NaN  2016-03-07 00:00:00                 0       26789   \n",
       "354365      NaN  2016-03-14 00:00:00                 0       39576   \n",
       "\n",
       "                   LastSeen  \n",
       "306     2016-03-24 02:47:34  \n",
       "522     2016-03-14 18:40:14  \n",
       "538     2016-04-06 14:45:44  \n",
       "552     2016-03-22 14:50:41  \n",
       "622     2016-03-20 16:44:37  \n",
       "...                     ...  \n",
       "353727  2016-04-07 00:46:36  \n",
       "354073  2016-04-01 01:47:17  \n",
       "354083  2016-04-06 23:46:19  \n",
       "354162  2016-04-03 11:46:59  \n",
       "354365  2016-04-06 00:46:52  \n",
       "\n",
       "[2237 rows x 16 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['VehicleType'].isna() & df['FuelType'].isna() & df['Model'].isna()&df['Repaired'].isna()&df['Gearbox'].isna()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В данных есть неинформативные столбцы ('NumberOfPictures', 'PostalCode', 'DateCreated', 'LastSeen', 'RegistrationMonth', 'DateCrawled') и столбцы с отсутствующими данными, которые важны для исследования ('VehicleType', 'Model', 'FuelType','NotRepaired'). Первые можно просто удалить из датафрейма, а вторые заполнить значением 'unknown', так как восстановить значения не представляется возможным. Например, для некоторых моделей есть разные типы двигателей, коробок и т.д."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим уникальные значения столбца 'Model'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['100', '145', '147', '156', '159', '1_reihe', '1er', '200',\n",
       "       '2_reihe', '300c', '3_reihe', '3er', '4_reihe', '500', '5_reihe',\n",
       "       '5er', '601', '6_reihe', '6er', '7er', '80', '850', '90', '900',\n",
       "       '9000', '911', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a8',\n",
       "       'a_klasse', 'accord', 'agila', 'alhambra', 'almera', 'altea',\n",
       "       'amarok', 'antara', 'arosa', 'astra', 'auris', 'avensis', 'aveo',\n",
       "       'aygo', 'b_klasse', 'b_max', 'beetle', 'berlingo', 'bora',\n",
       "       'boxster', 'bravo', 'c1', 'c2', 'c3', 'c4', 'c5', 'c_klasse',\n",
       "       'c_max', 'c_reihe', 'caddy', 'calibra', 'captiva', 'carisma',\n",
       "       'carnival', 'cayenne', 'cc', 'ceed', 'charade', 'cherokee',\n",
       "       'citigo', 'civic', 'cl', 'clio', 'clk', 'clubman', 'colt', 'combo',\n",
       "       'cooper', 'cordoba', 'corolla', 'corsa', 'cr_reihe', 'croma',\n",
       "       'crossfire', 'cuore', 'cx_reihe', 'defender', 'delta', 'discovery',\n",
       "       'doblo', 'ducato', 'duster', 'e_klasse', 'elefantino', 'eos',\n",
       "       'escort', 'espace', 'exeo', 'fabia', 'fiesta', 'focus', 'forester',\n",
       "       'forfour', 'fortwo', 'fox', 'freelander', 'fusion', 'g_klasse',\n",
       "       'galant', 'galaxy', 'getz', 'gl', 'glk', 'golf', 'grand', 'i3',\n",
       "       'i_reihe', 'ibiza', 'impreza', 'insignia', 'jazz', 'jetta',\n",
       "       'jimny', 'juke', 'justy', 'ka', 'kadett', 'kaefer', 'kalina',\n",
       "       'kalos', 'kangoo', 'kappa', 'kuga', 'laguna', 'lancer', 'lanos',\n",
       "       'legacy', 'leon', 'lodgy', 'logan', 'lupo', 'lybra', 'm_klasse',\n",
       "       'm_reihe', 'materia', 'matiz', 'megane', 'meriva', 'micra', 'mii',\n",
       "       'modus', 'mondeo', 'move', 'musa', 'mustang', 'mx_reihe', 'navara',\n",
       "       'niva', 'note', 'nubira', 'octavia', 'omega', 'one', 'other',\n",
       "       'outlander', 'pajero', 'panda', 'passat', 'phaeton', 'picanto',\n",
       "       'polo', 'primera', 'ptcruiser', 'punto', 'q3', 'q5', 'q7',\n",
       "       'qashqai', 'r19', 'range_rover', 'range_rover_evoque',\n",
       "       'range_rover_sport', 'rangerover', 'rav', 'rio', 'roadster',\n",
       "       'roomster', 'rx_reihe', 's60', 's_klasse', 's_max', 's_type',\n",
       "       'samara', 'sandero', 'santa', 'scenic', 'scirocco', 'seicento',\n",
       "       'serie_1', 'serie_2', 'serie_3', 'sharan', 'signum', 'sirion',\n",
       "       'sl', 'slk', 'sorento', 'spark', 'spider', 'sportage', 'sprinter',\n",
       "       'stilo', 'superb', 'swift', 'terios', 'tigra', 'tiguan', 'toledo',\n",
       "       'touareg', 'touran', 'transit', 'transporter', 'tt', 'tucson',\n",
       "       'twingo', 'up', 'v40', 'v50', 'v60', 'v70', 'v_klasse', 'vectra',\n",
       "       'verso', 'viano', 'vito', 'vivaro', 'voyager', 'wrangler',\n",
       "       'x_reihe', 'x_trail', 'x_type', 'xc_reihe', 'yaris', 'yeti',\n",
       "       'ypsilon', 'z_reihe', 'zafira', nan], dtype=object)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Model.sort_values().unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Среди данных есть модели обозначенные 'Other'. Нужно привести их к оному типу и обозначить 'unknown'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Увидим, что в данных присутствуют:\n",
    "\n",
    "- неинформативные признаки ('NumberOfPictures', 'PostalCode', 'DateCreated', 'LastSeen', 'RegistrationMonth', 'DateCrawled')\n",
    "- пропуски в значений в данных ('VehicleType', 'Model', 'FuelType','NotRepaired')\n",
    "- странные значения некоторых признаков ('RegistrationYear', 'Power')\n",
    "- нулевые значение в столбце 'Price'\n",
    "- неявные дубликаты в столбце 'FuelType'\n",
    "- дубликаты признаков  \n",
    "  \n",
    "Нужно провести предобработку данных."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Предобработка данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Удалим столбцы с неинформативными признаками."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(['NumberOfPictures', 'PostalCode', 'DateCreated', 'LastSeen', 'RegistrationMonth', 'DateCrawled'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Заменим пропуски в столбцах 'VehicleType', 'Model', 'FuelType', 'NorRepaired', 'GearBox'. Значения 'other' в столбце 'Model' так де приравняем к 'unknown'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['VehicleType'] = df['VehicleType'].fillna('unknown')\n",
    "df['Model'] = df['Model'].fillna('unknown')\n",
    "df['FuelType'] = df['FuelType'].fillna('unknown')\n",
    "df['Repaired'] = df['Repaired'].fillna('unknown')\n",
    "df['Gearbox'] = df['Gearbox'].fillna('unknown')\n",
    "\n",
    "df.loc[df['Model'] == 'other', 'Model'] = 'unknown'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Обработаем значения в столбцах 'RegistrationYear', 'Power'.  \n",
    "   Год выпуска определим с 1960 по 2016.  \n",
    "   Мощность ограничим по квантилям."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# RegistrationYear \n",
    "def RegYear(pow):\n",
    "    if pow > 2016:\n",
    "        return 2016\n",
    "    elif pow < 1960:\n",
    "        return 1960\n",
    "    else:\n",
    "        return pow\n",
    "df[\"RegistrationYear\"] = df[\"RegistrationYear\"].apply(RegYear)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заменим выбросы в столбце 'Power'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В столбце 'Power' присутствует множество значений больше 10000. Возможно, это связано с тем, что неправильно указана точка для разделения разрядов. Предлагаю такие данные разделить на 100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[(df.Power >= 10000), 'Power'] = df.Power / 100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на оставшиеся выбросы."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.boxplot(column='Power')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "До 10000 еще много выбросов осталось. Нормализуем данные по верхней границе нормальных даннных."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "power_q25 = df['Power'].quantile(0.25)\n",
    "power_q75 = df['Power'].quantile(0.75)\n",
    "power_iqr = power_q75 - power_q25\n",
    "power_right = power_q75 + power_iqr * 1.5\n",
    "#высчитаем верхнюю границу нормализованных данных\n",
    "\n",
    "df['Power'].clip(upper=power_right, inplace=True)\n",
    "#заменим данные в таблице по верхней границе на высчитанную границу нормализованных данных\n",
    "\n",
    "df.query('Power > @power_right')['Power'].sum()\n",
    "#проверим, что данных больше ceiling_height_right в столбце не осталось"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Снизу заменим данные до 40л.с. медианными значениями."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[(df.Power <40), 'Power'] = df.Power.median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "      <th>RegistrationYear</th>\n",
       "      <th>Power</th>\n",
       "      <th>Kilometer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>354369.000000</td>\n",
       "      <td>354369.000000</td>\n",
       "      <td>354369.000000</td>\n",
       "      <td>354369.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4416.656776</td>\n",
       "      <td>2003.050495</td>\n",
       "      <td>117.810075</td>\n",
       "      <td>128211.172535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4514.158514</td>\n",
       "      <td>7.279382</td>\n",
       "      <td>46.725299</td>\n",
       "      <td>37905.341530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1960.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1050.000000</td>\n",
       "      <td>1999.000000</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>125000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2700.000000</td>\n",
       "      <td>2003.000000</td>\n",
       "      <td>105.000000</td>\n",
       "      <td>150000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6400.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>143.000000</td>\n",
       "      <td>150000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>20000.000000</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>254.000000</td>\n",
       "      <td>150000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Price  RegistrationYear          Power      Kilometer\n",
       "count  354369.000000     354369.000000  354369.000000  354369.000000\n",
       "mean     4416.656776       2003.050495     117.810075  128211.172535\n",
       "std      4514.158514          7.279382      46.725299   37905.341530\n",
       "min         0.000000       1960.000000      40.000000    5000.000000\n",
       "25%      1050.000000       1999.000000      86.000000  125000.000000\n",
       "50%      2700.000000       2003.000000     105.000000  150000.000000\n",
       "75%      6400.000000       2008.000000     143.000000  150000.000000\n",
       "max     20000.000000       2016.000000     254.000000  150000.000000"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Обработаем выбросы в столбце 'Price'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        10772\n",
       "500       5670\n",
       "1500      5394\n",
       "1000      4649\n",
       "1200      4594\n",
       "         ...  \n",
       "13180        1\n",
       "10879        1\n",
       "2683         1\n",
       "634          1\n",
       "8188         1\n",
       "Name: Price, Length: 3731, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Price.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.Price.hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Увидим, что в ценах есть нулевые значения. Так как строк с ценами ниже 50 евро составляют незначительный процент от всего датафрейма, то просто удалим их."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.loc[df['Price'] > 50]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Обработаем неявные дубликаты в столбце 'FuelType'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.FuelType = df.FuelType.replace(['gasoline'],'petrol')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. Посмотрим на количество дубликатов и удалим их."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "44657"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#удалим дубликаты и проверим, что все впорядке\n",
    "df = df.drop_duplicates().reset_index(drop=True)\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим, что датафрейм готов к работе."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 296962 entries, 0 to 296961\n",
      "Data columns (total 10 columns):\n",
      " #   Column            Non-Null Count   Dtype  \n",
      "---  ------            --------------   -----  \n",
      " 0   Price             296962 non-null  int64  \n",
      " 1   VehicleType       296962 non-null  object \n",
      " 2   RegistrationYear  296962 non-null  int64  \n",
      " 3   Gearbox           296962 non-null  object \n",
      " 4   Power             296962 non-null  float64\n",
      " 5   Model             296962 non-null  object \n",
      " 6   Kilometer         296962 non-null  int64  \n",
      " 7   FuelType          296962 non-null  object \n",
      " 8   Brand             296962 non-null  object \n",
      " 9   Repaired          296962 non-null  object \n",
      "dtypes: float64(1), int64(3), object(6)\n",
      "memory usage: 22.7+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16.199780454836628"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "size_after = df.shape\n",
    "100-size_after[0]/size_before[0]*100\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "При анализе данных было вывлены недостатки датафрейма, которые могли влиять на качество модели, а именно:\n",
    "- неинформативные признаки ('NumberOfPictures', 'PostalCode', 'DateCreated', 'LastSeen', 'RegistrationMonth', 'DateCrawled')\n",
    "- пропуски в значений в данных ('VehicleType', 'Model', 'FuelType','NotRepaired')\n",
    "- странные значения некоторых признаков ('RegistrationYear', 'Power')\n",
    "- нулевые значения в столбце 'Price'\n",
    "- дубликаты признаков\n",
    "\n",
    "В связи с этим понадобилась предобработка данных.  \n",
    "В рамках предобработки данных были исключены неинформативные столбцы, обработаны пропуски в данных, исключены странные значения в столбцах, исключены нулевые значения в столбце 'Price' и дубликаты.  \n",
    "После обработки данных было исключено 16% данных."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Обучение моделей"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В качестве моделей выберем 4 вида моделей:\n",
    "- линейная регрессия\n",
    "- LightGBM\n",
    "- CatBoost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Закодируем категоральные признаки методом OHE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "      <th>RegistrationYear</th>\n",
       "      <th>Power</th>\n",
       "      <th>Kilometer</th>\n",
       "      <th>VehicleType_convertible</th>\n",
       "      <th>VehicleType_coupe</th>\n",
       "      <th>VehicleType_other</th>\n",
       "      <th>VehicleType_sedan</th>\n",
       "      <th>VehicleType_small</th>\n",
       "      <th>VehicleType_suv</th>\n",
       "      <th>...</th>\n",
       "      <th>Brand_smart</th>\n",
       "      <th>Brand_sonstige_autos</th>\n",
       "      <th>Brand_subaru</th>\n",
       "      <th>Brand_suzuki</th>\n",
       "      <th>Brand_toyota</th>\n",
       "      <th>Brand_trabant</th>\n",
       "      <th>Brand_volkswagen</th>\n",
       "      <th>Brand_volvo</th>\n",
       "      <th>Repaired_unknown</th>\n",
       "      <th>Repaired_yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>480</td>\n",
       "      <td>1993</td>\n",
       "      <td>105.0</td>\n",
       "      <td>150000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18300</td>\n",
       "      <td>2011</td>\n",
       "      <td>190.0</td>\n",
       "      <td>125000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9800</td>\n",
       "      <td>2004</td>\n",
       "      <td>163.0</td>\n",
       "      <td>125000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1500</td>\n",
       "      <td>2001</td>\n",
       "      <td>75.0</td>\n",
       "      <td>150000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3600</td>\n",
       "      <td>2008</td>\n",
       "      <td>69.0</td>\n",
       "      <td>90000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 310 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Price  RegistrationYear  Power  Kilometer  VehicleType_convertible  \\\n",
       "0    480              1993  105.0     150000                        0   \n",
       "1  18300              2011  190.0     125000                        0   \n",
       "2   9800              2004  163.0     125000                        0   \n",
       "3   1500              2001   75.0     150000                        0   \n",
       "4   3600              2008   69.0      90000                        0   \n",
       "\n",
       "   VehicleType_coupe  VehicleType_other  VehicleType_sedan  VehicleType_small  \\\n",
       "0                  0                  0                  0                  0   \n",
       "1                  1                  0                  0                  0   \n",
       "2                  0                  0                  0                  0   \n",
       "3                  0                  0                  0                  1   \n",
       "4                  0                  0                  0                  1   \n",
       "\n",
       "   VehicleType_suv  ...  Brand_smart  Brand_sonstige_autos  Brand_subaru  \\\n",
       "0                0  ...            0                     0             0   \n",
       "1                0  ...            0                     0             0   \n",
       "2                1  ...            0                     0             0   \n",
       "3                0  ...            0                     0             0   \n",
       "4                0  ...            0                     0             0   \n",
       "\n",
       "   Brand_suzuki  Brand_toyota  Brand_trabant  Brand_volkswagen  Brand_volvo  \\\n",
       "0             0             0              0                 1            0   \n",
       "1             0             0              0                 0            0   \n",
       "2             0             0              0                 0            0   \n",
       "3             0             0              0                 1            0   \n",
       "4             0             0              0                 0            0   \n",
       "\n",
       "   Repaired_unknown  Repaired_yes  \n",
       "0                 1             0  \n",
       "1                 0             1  \n",
       "2                 1             0  \n",
       "3                 0             0  \n",
       "4                 0             0  \n",
       "\n",
       "[5 rows x 310 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#закодируем признаки\n",
    "df_ohe = pd.get_dummies(df, drop_first=True)\n",
    "df_ohe.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Выделим целевой признак в отдельную переменную."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_ohe = df_ohe['Price']\n",
    "#запишем целевой признак в переменную target\n",
    "\n",
    "features_ohe = df_ohe.drop('Price', axis=1)\n",
    "#запишем остальные признаки в переменную features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Разделим на тестовую и обучающие выборки."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "features_ohe_train, features_ohe_test, target_ohe_train, target_ohe_test = train_test_split(\n",
    "    features_ohe, target_ohe, test_size=0.4, random_state=12345) \n",
    "#разобьем данные на обучающие и валидационную"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(178177, 309)\n",
      "(118785, 309)\n"
     ]
    }
   ],
   "source": [
    "print(features_ohe_train.shape)\n",
    "print(features_ohe_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Модель LightGBM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим модель LightGBM со стандартными параметрами и посмотрим значение метрики RMSE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 9.91 s, sys: 440 ms, total: 10.3 s\n",
      "Wall time: 10.4 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1766.4363025973903"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "model_lgb = lgb.LGBMRegressor(random_state=12345)\n",
    "model_lgb.fit(features_ohe_train, target_ohe_train)\n",
    "predictions_train_lgb = model_lgb.predict(features_ohe_train)\n",
    "rmse_lgb = mean_squared_error(target_ohe_train, predictions_train_lgb)**0.5\n",
    "rmse_lgb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Подберем гиперпараметры методом GridSearchCV."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n",
      "[CV 1/3] END ................n_estimators=100, num_leaves=20; total time=   5.7s\n",
      "[CV 2/3] END ................n_estimators=100, num_leaves=20; total time=   5.8s\n",
      "[CV 3/3] END ................n_estimators=100, num_leaves=20; total time=   7.8s\n",
      "[CV 1/3] END ................n_estimators=100, num_leaves=30; total time=   6.9s\n",
      "[CV 2/3] END ................n_estimators=100, num_leaves=30; total time=   6.9s\n",
      "[CV 3/3] END ................n_estimators=100, num_leaves=30; total time=   7.4s\n",
      "[CV 1/3] END ................n_estimators=100, num_leaves=40; total time=   7.4s\n",
      "[CV 2/3] END ................n_estimators=100, num_leaves=40; total time=   8.4s\n",
      "[CV 3/3] END ................n_estimators=100, num_leaves=40; total time=   6.7s\n",
      "[CV 1/3] END ................n_estimators=100, num_leaves=50; total time=  11.5s\n",
      "[CV 2/3] END ................n_estimators=100, num_leaves=50; total time=  11.7s\n",
      "[CV 3/3] END ................n_estimators=100, num_leaves=50; total time=  11.8s\n",
      "[CV 1/3] END ................n_estimators=100, num_leaves=60; total time=  10.6s\n",
      "[CV 2/3] END ................n_estimators=100, num_leaves=60; total time=   9.5s\n",
      "[CV 3/3] END ................n_estimators=100, num_leaves=60; total time=   8.9s\n",
      "[CV 1/3] END ................n_estimators=100, num_leaves=70; total time=   9.7s\n",
      "[CV 2/3] END ................n_estimators=100, num_leaves=70; total time=   9.9s\n",
      "[CV 3/3] END ................n_estimators=100, num_leaves=70; total time=  10.6s\n",
      "[CV 1/3] END ................n_estimators=100, num_leaves=80; total time=   9.9s\n",
      "[CV 2/3] END ................n_estimators=100, num_leaves=80; total time=  11.5s\n",
      "[CV 3/3] END ................n_estimators=100, num_leaves=80; total time=  10.5s\n",
      "[CV 1/3] END ................n_estimators=100, num_leaves=90; total time=  12.7s\n",
      "[CV 2/3] END ................n_estimators=100, num_leaves=90; total time=  10.7s\n",
      "[CV 3/3] END ................n_estimators=100, num_leaves=90; total time=  12.5s\n",
      "[CV 1/3] END ................n_estimators=200, num_leaves=20; total time=  10.1s\n",
      "[CV 2/3] END ................n_estimators=200, num_leaves=20; total time=   8.9s\n",
      "[CV 3/3] END ................n_estimators=200, num_leaves=20; total time=  11.7s\n",
      "[CV 1/3] END ................n_estimators=200, num_leaves=30; total time=   9.7s\n",
      "[CV 2/3] END ................n_estimators=200, num_leaves=30; total time=  13.8s\n",
      "[CV 3/3] END ................n_estimators=200, num_leaves=30; total time=  13.2s\n",
      "[CV 1/3] END ................n_estimators=200, num_leaves=40; total time=  12.7s\n",
      "[CV 2/3] END ................n_estimators=200, num_leaves=40; total time=  15.1s\n",
      "[CV 3/3] END ................n_estimators=200, num_leaves=40; total time=  11.0s\n",
      "[CV 1/3] END ................n_estimators=200, num_leaves=50; total time=  14.4s\n",
      "[CV 2/3] END ................n_estimators=200, num_leaves=50; total time=  13.7s\n",
      "[CV 3/3] END ................n_estimators=200, num_leaves=50; total time=  14.1s\n",
      "[CV 1/3] END ................n_estimators=200, num_leaves=60; total time=  14.9s\n",
      "[CV 2/3] END ................n_estimators=200, num_leaves=60; total time=  14.8s\n",
      "[CV 3/3] END ................n_estimators=200, num_leaves=60; total time=  19.8s\n",
      "[CV 1/3] END ................n_estimators=200, num_leaves=70; total time=  21.6s\n",
      "[CV 2/3] END ................n_estimators=200, num_leaves=70; total time=  31.6s\n",
      "[CV 3/3] END ................n_estimators=200, num_leaves=70; total time=  16.2s\n",
      "[CV 1/3] END ................n_estimators=200, num_leaves=80; total time=  18.0s\n",
      "[CV 2/3] END ................n_estimators=200, num_leaves=80; total time=  17.8s\n",
      "[CV 3/3] END ................n_estimators=200, num_leaves=80; total time=  17.7s\n",
      "[CV 1/3] END ................n_estimators=200, num_leaves=90; total time=  21.5s\n",
      "[CV 2/3] END ................n_estimators=200, num_leaves=90; total time=  22.2s\n",
      "[CV 3/3] END ................n_estimators=200, num_leaves=90; total time=  22.3s\n",
      "[CV 1/3] END ................n_estimators=500, num_leaves=20; total time=  22.4s\n",
      "[CV 2/3] END ................n_estimators=500, num_leaves=20; total time=  17.5s\n",
      "[CV 3/3] END ................n_estimators=500, num_leaves=20; total time=  19.5s\n",
      "[CV 1/3] END ................n_estimators=500, num_leaves=30; total time=  21.5s\n",
      "[CV 2/3] END ................n_estimators=500, num_leaves=30; total time=  20.2s\n",
      "[CV 3/3] END ................n_estimators=500, num_leaves=30; total time=  22.0s\n",
      "[CV 1/3] END ................n_estimators=500, num_leaves=40; total time=  26.8s\n",
      "[CV 2/3] END ................n_estimators=500, num_leaves=40; total time=  23.9s\n",
      "[CV 3/3] END ................n_estimators=500, num_leaves=40; total time=  28.1s\n",
      "[CV 1/3] END ................n_estimators=500, num_leaves=50; total time=  29.2s\n",
      "[CV 2/3] END ................n_estimators=500, num_leaves=50; total time=  29.4s\n",
      "[CV 3/3] END ................n_estimators=500, num_leaves=50; total time=  28.5s\n",
      "[CV 1/3] END ................n_estimators=500, num_leaves=60; total time=  29.4s\n",
      "[CV 2/3] END ................n_estimators=500, num_leaves=60; total time=  30.3s\n",
      "[CV 3/3] END ................n_estimators=500, num_leaves=60; total time=  30.4s\n",
      "[CV 1/3] END ................n_estimators=500, num_leaves=70; total time=  33.8s\n",
      "[CV 2/3] END ................n_estimators=500, num_leaves=70; total time=  33.9s\n",
      "[CV 3/3] END ................n_estimators=500, num_leaves=70; total time=  33.9s\n",
      "[CV 1/3] END ................n_estimators=500, num_leaves=80; total time=  38.5s\n",
      "[CV 2/3] END ................n_estimators=500, num_leaves=80; total time=  55.1s\n",
      "[CV 3/3] END ................n_estimators=500, num_leaves=80; total time=  36.9s\n",
      "[CV 1/3] END ................n_estimators=500, num_leaves=90; total time=  41.0s\n",
      "[CV 2/3] END ................n_estimators=500, num_leaves=90; total time=  44.8s\n",
      "[CV 3/3] END ................n_estimators=500, num_leaves=90; total time=  40.6s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'n_estimators': 500, 'num_leaves': 80}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "1681.4185874575087"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "param_grid_lgb = {'n_estimators': [100, 200, 500], 'num_leaves': [n for n in range(20, 100, 10)]}\n",
    "\n",
    "lgb_gscv=GridSearchCV(estimator=model_lgb,\n",
    "                          param_grid=param_grid_lgb,\n",
    "                          scoring='neg_root_mean_squared_error',\n",
    "                          cv=3,\n",
    "                          verbose=3)\n",
    "\n",
    "lgb_gscv.fit(features_ohe_train, target_ohe_train)\n",
    "display(lgb_gscv.best_params_)\n",
    "display(lgb_gscv.best_score_*-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "del lgb_gscv, param_grid_lgb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Добавим лучшие значения гиперпараметров в модель и выясним время обучение и результат модели."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Время обучения LightGBM: 40.61595034599304 секунд\n",
      "Время предсказания LightGBM на трейне: 12.188930034637451 секунд\n",
      "RMSE LightGBM на трейне: 1475.48\n"
     ]
    }
   ],
   "source": [
    "start_time_train = time.time()\n",
    "\n",
    "#построим модель с лучшими параметрами\n",
    "model_lgb = lgb.LGBMRegressor(random_state=12345, \n",
    "                              num_leaves = 80,\n",
    "                              n_estimators = 500)\n",
    "model_lgb.fit(features_ohe_train, target_ohe_train)\n",
    "\n",
    "end_time_train = time.time()\n",
    "training_time_lgb = end_time_train - start_time_train\n",
    "\n",
    "# Время обучения модели LightGBM\n",
    "print(\"Время обучения LightGBM: %s секунд\" % training_time_lgb)\n",
    "\n",
    "# Время предсказания модели LightGBM на трейне\n",
    "start_lgb_train = time.time()\n",
    "pred_lgb_train = model_lgb.predict(features_ohe_train)\n",
    "end_lgb_train = time.time()\n",
    "prediction_time_lgb_train = end_lgb_train - start_lgb_train\n",
    "print(\"Время предсказания LightGBM на трейне: %s секунд\" % prediction_time_lgb_train)\n",
    "\n",
    "# Оценка качества модели LightGBM на трейне\n",
    "rmse_lgb_train = mean_squared_error(target_ohe_train, pred_lgb_train, squared=False)\n",
    "print(\"RMSE LightGBM на трейне: %.2f\" % rmse_lgb_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "del start_time_train, end_time_train, training_time_lgb, start_lgb_train, pred_lgb_train, end_lgb_train, prediction_time_lgb_train, rmse_lgb_train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Модель Линейной регрессии\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Масштабируем признаки."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "numeric = ['Power', 'Kilometer']\n",
    "#запишем наименования численных столбцов в переменную numeric\n",
    "\n",
    "features_ohe_train_lr = features_ohe_train\n",
    "features_ohe_test_lr = features_ohe_test\n",
    "\n",
    "scaler = StandardScaler()\n",
    "#создадим переменную для стандартизатора\n",
    "\n",
    "scaler.fit(features_ohe_train[numeric])\n",
    "#передадим пример датафрейма стандартизатору\n",
    "\n",
    "pd.options.mode.chained_assignment = None\n",
    "#отключим стандартную ошибку\n",
    "\n",
    "features_ohe_train_lr[numeric] = scaler.transform(features_ohe_train[numeric])\n",
    "features_ohe_test_lr[numeric] = scaler.transform(features_ohe_test[numeric])\n",
    "#масштабируем данные во всем датафрейме"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим модель, посмотрим на время обучение и метрику RMSE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Время обучения LinearRegression: 17.243700742721558 секунд\n",
      "Время предсказания LinearRegression на трейне: 0.3958711624145508 секунд\n",
      "RMSE LinearRegression на трейне: 2740.55\n"
     ]
    }
   ],
   "source": [
    "start_time_train = time.time()\n",
    "\n",
    "#построим модель с лучшими параметрами\n",
    "model_lr = LinearRegression()\n",
    "model_lr.fit(features_ohe_train_lr, target_ohe_train)\n",
    "\n",
    "end_time_train = time.time()\n",
    "training_time_lr = end_time_train - start_time_train\n",
    "\n",
    "# Время обучения модели LinearRegression\n",
    "print(\"Время обучения LinearRegression: %s секунд\" % training_time_lr)\n",
    "\n",
    "# Время предсказания модели LinearRegression на трейне\n",
    "start_lr_train = time.time()\n",
    "pred_lr_train = model_lr.predict(features_ohe_train)\n",
    "end_lr_train = time.time()\n",
    "prediction_time_lr_train = end_lr_train - start_lr_train\n",
    "print(\"Время предсказания LinearRegression на трейне: %s секунд\" % prediction_time_lr_train)\n",
    "\n",
    "# Оценка качества модели LinearRegression на трейне\n",
    "rmse_lr_train = mean_squared_error(target_ohe_train, pred_lr_train, squared=False)\n",
    "print(\"RMSE LinearRegression на трейне: %.2f\" % rmse_lr_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "del start_time_train, end_time_train, training_time_lr, start_lr_train, pred_lr_train, end_lr_train, prediction_time_lr_train, rmse_lr_train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Модель CatBoost\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим модель CatBoost со стандартными параметрами и посмотрим значение метрики RMSE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 25.6 s, sys: 181 ms, total: 25.7 s\n",
      "Wall time: 26.9 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1648.6946887584477"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "model_cbr = CatBoostRegressor(loss_function='RMSE',\n",
    "                              logging_level='Silent')\n",
    "model_cbr.fit(features_ohe_train, target_ohe_train)\n",
    "predictions_train_cbr = model_cbr.predict(features_ohe_train)\n",
    "rmse_cbr = mean_squared_error(target_ohe_train, predictions_train_cbr)**0.5\n",
    "rmse_cbr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "del predictions_train_cbr, rmse_cbr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Подберем гиперпараметры методом GridSearchCV."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'depth': 10, 'learning_rate': 0.1}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "1683.7071433100907"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "param_grid_cbr = {'depth':[5,10], 'learning_rate':np.arange(0.1,1,0.2)}\n",
    "\n",
    "cbr_gscv=GridSearchCV(estimator=model_cbr,\n",
    "                      param_grid=param_grid_cbr,\n",
    "                      scoring='neg_root_mean_squared_error',\n",
    "                      cv=3,\n",
    "                      verbose=1)\n",
    "\n",
    "cbr_gscv.fit(features_ohe_train, target_ohe_train)\n",
    "display(cbr_gscv.best_params_)\n",
    "display(cbr_gscv.best_score_*-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "del param_grid_cbr, cbr_gscv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Добавим лучшие значения гиперпараметров в модель и выясним время обучение и результат модели."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "start_time_train = time.time()\n",
    "\n",
    "#построим модель с лучшими параметрами\n",
    "model_cbr = CatBoostRegressor(random_state=12345, \n",
    "                              depth = 10,\n",
    "                              learning_rate = 0.1,\n",
    "                              logging_level = 'Silent')\n",
    "model_cbr.fit(features_ohe_train, target_ohe_train)\n",
    "\n",
    "end_time_train = time.time()\n",
    "training_time_cbr_train = end_time_train - start_time_train\n",
    "\n",
    "# Время обучения модели CatBoost\n",
    "print(\"Время обучения CatBoost: %s секунд\" % training_time_cbr_train)\n",
    "\n",
    "# Время предсказания модели CatBoost на трейне\n",
    "start_cbr_train = time.time()\n",
    "pred_cbr_train = model_cbr.predict(features_ohe_train)\n",
    "end_cbr_train = time.time()\n",
    "prediction_time_cbr_train = end_cbr_train - start_cbr_train\n",
    "print(\"Время предсказания CatBoost на трейне: %s секунд\" % prediction_time_cbr_train)\n",
    "\n",
    "# Оценка качества модели CatBoost на трейне\n",
    "rmse_cbr_train = mean_squared_error(target_ohe_train, pred_cbr_train, squared=False)\n",
    "print(\"RMSE CatBoost на трейне: %.2f\" % rmse_cbr_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "del start_time_train, end_time_train, training_time_cbr_train, start_cbr_train, pred_cbr_train, end_cbr_train, prediction_time_cbr_train, rmse_cbr_train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Анализ моделей"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В предыдущей главе были рассмотрены модели LightGBM, CatBoost и LinearRegression.  \n",
    "Данные по моделям были получены следующие:  \n",
    "<br>\n",
    "1. LightGBM.   \n",
    "Время обучения LightGBM: 566.6495299339294 секунд  \n",
    "Время предсказания LightGBM на трейне: 11.43785309791565 секунд  \n",
    "RMSE LightGBM на трейне: 1475.48  \n",
    "<br>\n",
    "\n",
    "2. LinearRegression.  \n",
    "Время обучения LinearRegression: 21.655750513076782 секунд  \n",
    "Время предсказания LinearRegression на трейне: 0.39702773094177246 секунд  \n",
    "RMSE LinearRegression на трейне: 2740.55  \n",
    "<br>  \n",
    "\n",
    "3. CatBoost.  \n",
    "Время обучения CatBoost: 57.93861389160156 секунд\n",
    "Время предсказания CatBoost на трейне: 0.9522836208343506 секунд\n",
    "RMSE CatBoost на трейне: 1486.27\n",
    "<br>\n",
    "\n",
    "Исходя из условий задачи (RMSE дожен быть ниже 2500) сразу можно откинуть модель LinearRegression так как не удовлетворят требованию по качеству.\n",
    "Несмотря на то, что остальные кандидаты оказались близки друг к другу по качеству, лучшие характеристики показала модель CatBoost, так как оказалась значительно быстрее. Выберем ее для предсказания на тесте."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Время предсказания модели CatBoost на тесте\n",
    "start_cbr_test = time.time()\n",
    "pred_cbr_test = model_cbr.predict(features_ohe_test)\n",
    "end_cbr_test = time.time()\n",
    "prediction_time_cbr_test = end_cbr_test - start_cbr_test\n",
    "print(\"Время предсказания CatBoost на тесте: %s секунд\" % prediction_time_cbr_test)\n",
    "\n",
    "# Оценка качества модели CatBoost на тесте\n",
    "rmse_cbr_test = mean_squared_error(target_ohe_test, pred_cbr_test, squared=False)\n",
    "print(\"RMSE CatBoost на тесте: %.2f\" % rmse_cbr_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Вывод\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В данном проекте были проанализрованы различные модели предсказания стоимости автомобиля.  \n",
    "Основными критериями выбора модели были заявлены:\n",
    "<br>\n",
    "- качество предсказания;\n",
    "- время обучения модели;\n",
    "- время предсказания модели.\n",
    "  \n",
    "\n",
    "  \n",
    "Исходя из полученных данных самая быстрая и качественная модель это модель LightGBM. LinearRegression оказалась быстрой, но качество сильно ниже чем требуется по условию задачи. LightGBM показала хорошую метрику, но по времени сильно уступает Catboost.\n",
    "Рекомендую использовать модель CatBoost для опеределения рыночной стоимости автомобилей для привлечения новых клиентов."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Чек-лист проверки"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поставьте 'x' в выполненных пунктах. Далее нажмите Shift+Enter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- [x]  Jupyter Notebook открыт\n",
    "- [x]  Весь код выполняется без ошибок\n",
    "- [x]  Ячейки с кодом расположены в порядке исполнения\n",
    "- [x]  Выполнена загрузка и подготовка данных\n",
    "- [x]  Выполнено обучение моделей\n",
    "- [x]  Есть анализ скорости работы и качества моделей"
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 487,
    "start_time": "2023-06-26T21:27:44.466Z"
   },
   {
    "duration": 102,
    "start_time": "2023-06-26T21:28:20.820Z"
   },
   {
    "duration": 4302,
    "start_time": "2023-06-26T21:28:27.505Z"
   },
   {
    "duration": 26,
    "start_time": "2023-06-26T21:28:42.333Z"
   },
   {
    "duration": 15,
    "start_time": "2023-06-26T21:28:49.196Z"
   },
   {
    "duration": 19044,
    "start_time": "2023-06-26T21:29:29.736Z"
   },
   {
    "duration": 1952,
    "start_time": "2023-06-26T21:30:03.864Z"
   },
   {
    "duration": 36027,
    "start_time": "2023-06-26T21:30:17.300Z"
   },
   {
    "duration": 36414,
    "start_time": "2023-06-26T21:31:06.120Z"
   },
   {
    "duration": 51,
    "start_time": "2023-06-26T21:31:42.536Z"
   },
   {
    "duration": 1251,
    "start_time": "2024-02-21T13:40:40.816Z"
   },
   {
    "duration": 170,
    "start_time": "2024-02-21T13:52:32.335Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-21T13:52:38.456Z"
   },
   {
    "duration": 470,
    "start_time": "2024-02-21T13:52:38.461Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.933Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.934Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.936Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.937Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.939Z"
   },
   {
    "duration": 1,
    "start_time": "2024-02-21T13:52:38.939Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.940Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.941Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.943Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.944Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.945Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.946Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.947Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.949Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.950Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.951Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.952Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:38.953Z"
   },
   {
    "duration": 2,
    "start_time": "2024-02-21T13:52:54.389Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-21T13:52:54.394Z"
   },
   {
    "duration": 56,
    "start_time": "2024-02-21T13:52:54.402Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.460Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.461Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.462Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.464Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.465Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.466Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.467Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.468Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.469Z"
   },
   {
    "duration": 1,
    "start_time": "2024-02-21T13:52:54.470Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.472Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.473Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.474Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.475Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.476Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.477Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T13:52:54.479Z"
   },
   {
    "duration": 1257,
    "start_time": "2024-02-21T13:53:35.505Z"
   },
   {
    "duration": 960,
    "start_time": "2024-02-21T13:53:41.020Z"
   },
   {
    "duration": 2,
    "start_time": "2024-02-21T13:53:41.983Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-21T13:53:41.987Z"
   },
   {
    "duration": 58,
    "start_time": "2024-02-21T13:53:41.996Z"
   },
   {
    "duration": 71,
    "start_time": "2024-02-21T13:53:42.057Z"
   },
   {
    "duration": 227,
    "start_time": "2024-02-21T13:53:42.130Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-21T13:53:42.358Z"
   },
   {
    "duration": 186,
    "start_time": "2024-02-21T13:53:42.373Z"
   },
   {
    "duration": 31,
    "start_time": "2024-02-21T13:53:42.561Z"
   },
   {
    "duration": 187,
    "start_time": "2024-02-21T13:53:42.594Z"
   },
   {
    "duration": 360,
    "start_time": "2024-02-21T13:53:42.782Z"
   },
   {
    "duration": 114,
    "start_time": "2024-02-21T13:53:43.144Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-21T13:53:43.259Z"
   },
   {
    "duration": 696,
    "start_time": "2024-02-21T13:53:43.266Z"
   },
   {
    "duration": 196,
    "start_time": "2024-02-21T13:53:43.964Z"
   },
   {
    "duration": 377,
    "start_time": "2024-02-21T13:53:44.162Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-21T13:53:44.540Z"
   },
   {
    "duration": 86,
    "start_time": "2024-02-21T13:53:44.546Z"
   },
   {
    "duration": 55416,
    "start_time": "2024-02-21T13:54:21.817Z"
   },
   {
    "duration": 56,
    "start_time": "2024-02-21T13:58:15.736Z"
   },
   {
    "duration": 89,
    "start_time": "2024-02-21T14:01:07.691Z"
   },
   {
    "duration": 105,
    "start_time": "2024-02-21T14:01:48.815Z"
   },
   {
    "duration": 79,
    "start_time": "2024-02-21T14:03:06.765Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-21T14:03:26.682Z"
   },
   {
    "duration": 78,
    "start_time": "2024-02-21T14:04:12.374Z"
   },
   {
    "duration": 2226,
    "start_time": "2024-02-21T14:05:18.136Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-21T14:08:04.156Z"
   },
   {
    "duration": 1503,
    "start_time": "2024-02-21T14:08:04.163Z"
   },
   {
    "duration": 1000,
    "start_time": "2024-02-21T14:08:05.668Z"
   },
   {
    "duration": 2,
    "start_time": "2024-02-21T14:08:06.670Z"
   },
   {
    "duration": 8,
    "start_time": "2024-02-21T14:08:06.674Z"
   },
   {
    "duration": 56,
    "start_time": "2024-02-21T14:08:06.684Z"
   },
   {
    "duration": 1502,
    "start_time": "2024-02-21T14:08:06.742Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.247Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.248Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.250Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.251Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.253Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.255Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.256Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.258Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.260Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.261Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.263Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.265Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.266Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.268Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:08:08.270Z"
   },
   {
    "duration": 110,
    "start_time": "2024-02-21T14:08:30.594Z"
   },
   {
    "duration": 81,
    "start_time": "2024-02-21T14:08:41.039Z"
   },
   {
    "duration": 82,
    "start_time": "2024-02-21T14:08:45.893Z"
   },
   {
    "duration": 232,
    "start_time": "2024-02-21T14:08:45.977Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-21T14:08:46.211Z"
   },
   {
    "duration": 201,
    "start_time": "2024-02-21T14:08:46.225Z"
   },
   {
    "duration": 100,
    "start_time": "2024-02-21T14:08:46.429Z"
   },
   {
    "duration": 215,
    "start_time": "2024-02-21T14:08:46.531Z"
   },
   {
    "duration": 417,
    "start_time": "2024-02-21T14:08:46.747Z"
   },
   {
    "duration": 109,
    "start_time": "2024-02-21T14:08:47.166Z"
   },
   {
    "duration": 16,
    "start_time": "2024-02-21T14:08:47.276Z"
   },
   {
    "duration": 826,
    "start_time": "2024-02-21T14:08:47.294Z"
   },
   {
    "duration": 197,
    "start_time": "2024-02-21T14:08:48.122Z"
   },
   {
    "duration": 394,
    "start_time": "2024-02-21T14:08:48.323Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-21T14:08:48.719Z"
   },
   {
    "duration": 57202,
    "start_time": "2024-02-21T14:08:48.727Z"
   },
   {
    "duration": 2915,
    "start_time": "2024-02-21T14:09:45.931Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-21T14:09:48.847Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-21T14:11:57.927Z"
   },
   {
    "duration": 1466,
    "start_time": "2024-02-21T14:11:57.932Z"
   },
   {
    "duration": 981,
    "start_time": "2024-02-21T14:11:59.400Z"
   },
   {
    "duration": 2,
    "start_time": "2024-02-21T14:12:00.383Z"
   },
   {
    "duration": 51,
    "start_time": "2024-02-21T14:12:00.387Z"
   },
   {
    "duration": 82,
    "start_time": "2024-02-21T14:12:00.440Z"
   },
   {
    "duration": 124,
    "start_time": "2024-02-21T14:12:00.523Z"
   },
   {
    "duration": 243,
    "start_time": "2024-02-21T14:12:00.649Z"
   },
   {
    "duration": 10,
    "start_time": "2024-02-21T14:12:00.895Z"
   },
   {
    "duration": 296,
    "start_time": "2024-02-21T14:12:00.906Z"
   },
   {
    "duration": 39,
    "start_time": "2024-02-21T14:12:01.203Z"
   },
   {
    "duration": 201,
    "start_time": "2024-02-21T14:12:01.244Z"
   },
   {
    "duration": 355,
    "start_time": "2024-02-21T14:12:01.446Z"
   },
   {
    "duration": 91,
    "start_time": "2024-02-21T14:12:01.803Z"
   },
   {
    "duration": 27,
    "start_time": "2024-02-21T14:12:01.896Z"
   },
   {
    "duration": 830,
    "start_time": "2024-02-21T14:12:01.924Z"
   },
   {
    "duration": 202,
    "start_time": "2024-02-21T14:12:02.756Z"
   },
   {
    "duration": 386,
    "start_time": "2024-02-21T14:12:02.960Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-21T14:12:03.348Z"
   },
   {
    "duration": 58384,
    "start_time": "2024-02-21T14:12:03.354Z"
   },
   {
    "duration": 228,
    "start_time": "2024-02-21T14:13:01.740Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-21T14:13:01.970Z"
   },
   {
    "duration": 66849,
    "start_time": "2024-02-21T14:13:35.181Z"
   },
   {
    "duration": 567452,
    "start_time": "2024-02-21T14:14:42.032Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T14:24:09.505Z"
   },
   {
    "duration": 14,
    "start_time": "2024-02-21T14:24:38.032Z"
   },
   {
    "duration": 10148,
    "start_time": "2024-02-21T14:25:02.699Z"
   },
   {
    "duration": 9484,
    "start_time": "2024-02-21T14:25:23.662Z"
   },
   {
    "duration": 11283,
    "start_time": "2024-02-21T14:25:40.559Z"
   },
   {
    "duration": 8421,
    "start_time": "2024-02-21T14:25:53.616Z"
   },
   {
    "duration": 9,
    "start_time": "2024-02-21T14:26:43.959Z"
   },
   {
    "duration": 10,
    "start_time": "2024-02-21T14:26:53.993Z"
   },
   {
    "duration": 2251753,
    "start_time": "2024-02-21T14:27:04.683Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-21T15:05:12.157Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-21T15:05:50.979Z"
   },
   {
    "duration": 85934,
    "start_time": "2024-02-21T15:05:59.709Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-21T15:12:06.779Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-21T15:12:08.033Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-21T15:13:41.300Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-21T15:14:26.399Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-21T15:14:37.950Z"
   },
   {
    "duration": 10,
    "start_time": "2024-02-21T15:15:28.876Z"
   },
   {
    "duration": 17038,
    "start_time": "2024-02-21T15:15:51.794Z"
   },
   {
    "duration": 17457,
    "start_time": "2024-02-21T15:16:24.368Z"
   },
   {
    "duration": 30,
    "start_time": "2024-02-21T15:18:14.371Z"
   },
   {
    "duration": 16847,
    "start_time": "2024-02-21T15:21:57.987Z"
   },
   {
    "duration": 82,
    "start_time": "2024-02-21T15:23:18.455Z"
   },
   {
    "duration": 71,
    "start_time": "2024-02-21T15:23:52.901Z"
   },
   {
    "duration": 17258,
    "start_time": "2024-02-21T15:24:10.877Z"
   },
   {
    "duration": 27737,
    "start_time": "2024-02-21T15:27:53.815Z"
   },
   {
    "duration": 28172,
    "start_time": "2024-02-21T15:30:38.522Z"
   },
   {
    "duration": 1009422,
    "start_time": "2024-02-21T15:32:57.703Z"
   },
   {
    "duration": 14,
    "start_time": "2024-02-21T16:55:18.040Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T16:56:14.805Z"
   },
   {
    "duration": 4364,
    "start_time": "2024-02-21T16:56:17.759Z"
   },
   {
    "duration": 11,
    "start_time": "2024-02-21T16:56:33.110Z"
   },
   {
    "duration": 59984,
    "start_time": "2024-02-21T16:57:36.363Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T16:58:36.349Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T16:58:36.351Z"
   },
   {
    "duration": 59690,
    "start_time": "2024-02-21T16:58:50.908Z"
   },
   {
    "duration": 26433,
    "start_time": "2024-02-21T17:20:45.506Z"
   },
   {
    "duration": 2705,
    "start_time": "2024-02-21T17:21:11.941Z"
   },
   {
    "duration": 1040,
    "start_time": "2024-02-21T17:21:14.648Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-21T17:21:15.690Z"
   },
   {
    "duration": 10,
    "start_time": "2024-02-21T17:21:15.695Z"
   },
   {
    "duration": 69,
    "start_time": "2024-02-21T17:21:15.707Z"
   },
   {
    "duration": 102,
    "start_time": "2024-02-21T17:21:15.778Z"
   },
   {
    "duration": 241,
    "start_time": "2024-02-21T17:21:15.881Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-21T17:21:16.124Z"
   },
   {
    "duration": 189,
    "start_time": "2024-02-21T17:21:16.138Z"
   },
   {
    "duration": 38,
    "start_time": "2024-02-21T17:21:16.328Z"
   },
   {
    "duration": 194,
    "start_time": "2024-02-21T17:21:16.368Z"
   },
   {
    "duration": 339,
    "start_time": "2024-02-21T17:21:16.564Z"
   },
   {
    "duration": 93,
    "start_time": "2024-02-21T17:21:16.906Z"
   },
   {
    "duration": 10,
    "start_time": "2024-02-21T17:21:17.001Z"
   },
   {
    "duration": 758,
    "start_time": "2024-02-21T17:21:17.013Z"
   },
   {
    "duration": 195,
    "start_time": "2024-02-21T17:21:17.772Z"
   },
   {
    "duration": 997,
    "start_time": "2024-02-21T17:21:17.969Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-21T17:21:18.967Z"
   },
   {
    "duration": 11196,
    "start_time": "2024-02-21T17:21:18.972Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T17:21:30.170Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T17:21:30.171Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T17:21:30.172Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T17:21:30.173Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T17:21:30.174Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T17:21:30.175Z"
   },
   {
    "duration": 8972,
    "start_time": "2024-02-21T17:22:42.954Z"
   },
   {
    "duration": 2259109,
    "start_time": "2024-02-21T17:22:51.928Z"
   },
   {
    "duration": 67033,
    "start_time": "2024-02-21T18:00:31.038Z"
   },
   {
    "duration": 17159,
    "start_time": "2024-02-21T18:01:38.073Z"
   },
   {
    "duration": 14,
    "start_time": "2024-02-21T18:01:55.324Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T18:01:55.340Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T18:01:55.341Z"
   },
   {
    "duration": 38,
    "start_time": "2024-02-21T19:56:43.122Z"
   },
   {
    "duration": 26728,
    "start_time": "2024-02-21T19:56:58.385Z"
   },
   {
    "duration": 22,
    "start_time": "2024-02-21T19:57:25.115Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-21T19:57:25.139Z"
   },
   {
    "duration": 976875,
    "start_time": "2024-02-21T19:57:57.016Z"
   },
   {
    "duration": 59021,
    "start_time": "2024-02-21T20:14:13.893Z"
   },
   {
    "duration": 27344,
    "start_time": "2024-02-22T21:19:20.989Z"
   },
   {
    "duration": 46,
    "start_time": "2024-02-22T21:21:07.750Z"
   },
   {
    "duration": 2739,
    "start_time": "2024-02-22T21:21:13.667Z"
   },
   {
    "duration": 1075,
    "start_time": "2024-02-22T21:21:16.408Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-22T21:21:18.129Z"
   },
   {
    "duration": 694,
    "start_time": "2024-02-22T21:21:19.810Z"
   },
   {
    "duration": 991,
    "start_time": "2024-02-22T21:22:45.613Z"
   },
   {
    "duration": 138,
    "start_time": "2024-02-22T21:29:00.041Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-22T21:29:08.836Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-22T21:35:50.078Z"
   },
   {
    "duration": 2563,
    "start_time": "2024-02-22T21:36:03.038Z"
   },
   {
    "duration": 2433,
    "start_time": "2024-02-22T21:36:05.604Z"
   },
   {
    "duration": 874,
    "start_time": "2024-02-22T21:36:08.039Z"
   },
   {
    "duration": 37311,
    "start_time": "2024-02-22T21:36:08.915Z"
   },
   {
    "duration": 2,
    "start_time": "2024-02-22T21:36:46.228Z"
   },
   {
    "duration": 1015,
    "start_time": "2024-02-22T21:36:46.232Z"
   },
   {
    "duration": 20,
    "start_time": "2024-02-22T21:36:47.248Z"
   },
   {
    "duration": 33,
    "start_time": "2024-02-22T21:36:47.269Z"
   },
   {
    "duration": 78,
    "start_time": "2024-02-22T21:36:47.303Z"
   },
   {
    "duration": 232,
    "start_time": "2024-02-22T21:36:47.383Z"
   },
   {
    "duration": 8,
    "start_time": "2024-02-22T21:36:47.617Z"
   },
   {
    "duration": 175,
    "start_time": "2024-02-22T21:36:47.627Z"
   },
   {
    "duration": 30,
    "start_time": "2024-02-22T21:36:47.804Z"
   },
   {
    "duration": 167,
    "start_time": "2024-02-22T21:36:47.836Z"
   },
   {
    "duration": 317,
    "start_time": "2024-02-22T21:36:48.005Z"
   },
   {
    "duration": 92,
    "start_time": "2024-02-22T21:36:48.323Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-22T21:36:48.417Z"
   },
   {
    "duration": 619,
    "start_time": "2024-02-22T21:36:48.423Z"
   },
   {
    "duration": 191,
    "start_time": "2024-02-22T21:36:49.044Z"
   },
   {
    "duration": 906,
    "start_time": "2024-02-22T21:36:49.237Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-22T21:36:50.145Z"
   },
   {
    "duration": 184134,
    "start_time": "2024-02-22T21:36:50.150Z"
   },
   {
    "duration": 2224531,
    "start_time": "2024-02-22T21:39:54.285Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-22T22:16:58.817Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-22T22:16:58.819Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-22T22:16:58.819Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-22T22:16:58.820Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-22T22:16:58.822Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-22T22:16:58.822Z"
   },
   {
    "duration": 76,
    "start_time": "2024-02-22T22:17:01.860Z"
   },
   {
    "duration": 14,
    "start_time": "2024-02-22T22:17:34.665Z"
   },
   {
    "duration": 79,
    "start_time": "2024-02-22T22:17:40.027Z"
   },
   {
    "duration": 49,
    "start_time": "2024-02-23T07:15:26.505Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-23T07:15:30.737Z"
   },
   {
    "duration": 1665,
    "start_time": "2024-02-23T07:15:34.015Z"
   },
   {
    "duration": 25232,
    "start_time": "2024-02-23T07:15:44.970Z"
   },
   {
    "duration": 455,
    "start_time": "2024-02-23T07:16:12.745Z"
   },
   {
    "duration": 2766,
    "start_time": "2024-02-23T07:16:29.947Z"
   },
   {
    "duration": 2817,
    "start_time": "2024-02-23T07:16:46.283Z"
   },
   {
    "duration": 2918,
    "start_time": "2024-02-23T07:16:50.567Z"
   },
   {
    "duration": 145,
    "start_time": "2024-02-23T07:16:56.889Z"
   },
   {
    "duration": 24,
    "start_time": "2024-02-23T07:17:16.248Z"
   },
   {
    "duration": 1157,
    "start_time": "2024-02-23T07:19:04.390Z"
   },
   {
    "duration": 35,
    "start_time": "2024-02-23T07:29:29.522Z"
   },
   {
    "duration": 153,
    "start_time": "2024-02-23T07:30:24.730Z"
   },
   {
    "duration": 203,
    "start_time": "2024-02-23T07:31:04.148Z"
   },
   {
    "duration": 199,
    "start_time": "2024-02-23T07:31:32.478Z"
   },
   {
    "duration": 185,
    "start_time": "2024-02-23T07:31:59.284Z"
   },
   {
    "duration": 228,
    "start_time": "2024-02-23T07:33:41.567Z"
   },
   {
    "duration": 198,
    "start_time": "2024-02-23T07:33:55.146Z"
   },
   {
    "duration": 6,
    "start_time": "2024-02-23T07:34:17.248Z"
   },
   {
    "duration": 193,
    "start_time": "2024-02-23T07:34:53.747Z"
   },
   {
    "duration": 197,
    "start_time": "2024-02-23T07:35:19.895Z"
   },
   {
    "duration": 204,
    "start_time": "2024-02-23T07:35:23.469Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-23T07:37:23.402Z"
   },
   {
    "duration": 443,
    "start_time": "2024-02-23T07:40:12.565Z"
   },
   {
    "duration": 28,
    "start_time": "2024-02-23T07:45:38.134Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:49:01.261Z"
   },
   {
    "duration": 1598,
    "start_time": "2024-02-23T07:49:09.179Z"
   },
   {
    "duration": 1702,
    "start_time": "2024-02-23T07:49:40.270Z"
   },
   {
    "duration": 110,
    "start_time": "2024-02-23T07:49:48.492Z"
   },
   {
    "duration": 16,
    "start_time": "2024-02-23T07:55:53.051Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:55:53.070Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:55:53.071Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:55:53.073Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:55:53.075Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:55:53.076Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:55:53.077Z"
   },
   {
    "duration": 19,
    "start_time": "2024-02-23T07:55:53.080Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:55:53.100Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:55:53.102Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:55:53.103Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:55:53.104Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T07:55:53.105Z"
   },
   {
    "duration": 2969,
    "start_time": "2024-02-23T07:56:43.081Z"
   },
   {
    "duration": 2779,
    "start_time": "2024-02-23T07:56:46.052Z"
   },
   {
    "duration": 933,
    "start_time": "2024-02-23T07:56:48.833Z"
   },
   {
    "duration": 43778,
    "start_time": "2024-02-23T07:56:49.773Z"
   },
   {
    "duration": 20,
    "start_time": "2024-02-23T07:57:33.554Z"
   },
   {
    "duration": 1109,
    "start_time": "2024-02-23T07:57:33.576Z"
   },
   {
    "duration": 163,
    "start_time": "2024-02-23T07:57:34.687Z"
   },
   {
    "duration": 23,
    "start_time": "2024-02-23T07:57:34.852Z"
   },
   {
    "duration": 37,
    "start_time": "2024-02-23T07:57:34.877Z"
   },
   {
    "duration": 226,
    "start_time": "2024-02-23T07:57:34.916Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-23T07:57:35.143Z"
   },
   {
    "duration": 401,
    "start_time": "2024-02-23T07:57:35.152Z"
   },
   {
    "duration": 108,
    "start_time": "2024-02-23T07:57:35.555Z"
   },
   {
    "duration": 25,
    "start_time": "2024-02-23T07:57:35.675Z"
   },
   {
    "duration": 118,
    "start_time": "2024-02-23T07:57:35.702Z"
   },
   {
    "duration": 154,
    "start_time": "2024-02-23T07:57:35.822Z"
   },
   {
    "duration": 56,
    "start_time": "2024-02-23T07:57:35.978Z"
   },
   {
    "duration": 11,
    "start_time": "2024-02-23T07:57:36.036Z"
   },
   {
    "duration": 257,
    "start_time": "2024-02-23T07:57:36.050Z"
   },
   {
    "duration": 45,
    "start_time": "2024-02-23T07:57:36.309Z"
   },
   {
    "duration": 64,
    "start_time": "2024-02-23T07:57:36.356Z"
   },
   {
    "duration": 173,
    "start_time": "2024-02-23T07:57:36.421Z"
   },
   {
    "duration": 343,
    "start_time": "2024-02-23T07:57:36.596Z"
   },
   {
    "duration": 99,
    "start_time": "2024-02-23T07:57:36.941Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T07:58:34.736Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-23T07:58:52.070Z"
   },
   {
    "duration": 2881,
    "start_time": "2024-02-23T07:59:14.189Z"
   },
   {
    "duration": 2772,
    "start_time": "2024-02-23T07:59:17.073Z"
   },
   {
    "duration": 916,
    "start_time": "2024-02-23T07:59:19.847Z"
   },
   {
    "duration": 41386,
    "start_time": "2024-02-23T07:59:20.765Z"
   },
   {
    "duration": 19,
    "start_time": "2024-02-23T08:00:02.154Z"
   },
   {
    "duration": 1098,
    "start_time": "2024-02-23T08:00:02.175Z"
   },
   {
    "duration": 155,
    "start_time": "2024-02-23T08:00:03.275Z"
   },
   {
    "duration": 8,
    "start_time": "2024-02-23T08:00:03.432Z"
   },
   {
    "duration": 46,
    "start_time": "2024-02-23T08:00:03.441Z"
   },
   {
    "duration": 223,
    "start_time": "2024-02-23T08:00:03.489Z"
   },
   {
    "duration": 6,
    "start_time": "2024-02-23T08:00:03.714Z"
   },
   {
    "duration": 455,
    "start_time": "2024-02-23T08:00:03.721Z"
   },
   {
    "duration": 111,
    "start_time": "2024-02-23T08:00:04.178Z"
   },
   {
    "duration": 25,
    "start_time": "2024-02-23T08:00:04.291Z"
   },
   {
    "duration": 95,
    "start_time": "2024-02-23T08:00:04.317Z"
   },
   {
    "duration": 148,
    "start_time": "2024-02-23T08:00:04.414Z"
   },
   {
    "duration": 54,
    "start_time": "2024-02-23T08:00:04.564Z"
   },
   {
    "duration": 8,
    "start_time": "2024-02-23T08:00:04.620Z"
   },
   {
    "duration": 178,
    "start_time": "2024-02-23T08:00:04.630Z"
   },
   {
    "duration": 33,
    "start_time": "2024-02-23T08:00:04.809Z"
   },
   {
    "duration": 47,
    "start_time": "2024-02-23T08:00:04.843Z"
   },
   {
    "duration": 165,
    "start_time": "2024-02-23T08:00:04.891Z"
   },
   {
    "duration": 340,
    "start_time": "2024-02-23T08:00:05.058Z"
   },
   {
    "duration": 99,
    "start_time": "2024-02-23T08:00:05.400Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-23T08:00:08.774Z"
   },
   {
    "duration": 580,
    "start_time": "2024-02-23T08:02:23.637Z"
   },
   {
    "duration": 185,
    "start_time": "2024-02-23T08:02:24.219Z"
   },
   {
    "duration": 734,
    "start_time": "2024-02-23T08:02:24.405Z"
   },
   {
    "duration": 194,
    "start_time": "2024-02-23T08:02:25.141Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:02:25.337Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:02:25.338Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:02:25.339Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:02:25.340Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:02:25.342Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:02:25.343Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:02:25.344Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:02:25.345Z"
   },
   {
    "duration": 714,
    "start_time": "2024-02-23T08:09:14.681Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-23T08:09:15.397Z"
   },
   {
    "duration": 42972,
    "start_time": "2024-02-23T08:09:15.402Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:09:58.376Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:09:58.377Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:09:58.378Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:09:58.379Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:09:58.380Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:09:58.381Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T08:09:58.382Z"
   },
   {
    "duration": 8996,
    "start_time": "2024-02-23T08:34:17.097Z"
   },
   {
    "duration": 2379909,
    "start_time": "2024-02-23T08:34:26.094Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T09:14:06.005Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T09:14:06.006Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T09:14:06.008Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T09:14:06.009Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T09:14:06.010Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T09:14:06.011Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T09:14:06.012Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T09:14:06.013Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T09:14:06.014Z"
   },
   {
    "duration": 2915445,
    "start_time": "2024-02-23T09:14:19.046Z"
   },
   {
    "duration": 54853,
    "start_time": "2024-02-23T10:05:03.021Z"
   },
   {
    "duration": 14,
    "start_time": "2024-02-23T10:06:04.193Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-23T10:06:39.897Z"
   },
   {
    "duration": 17,
    "start_time": "2024-02-23T10:06:55.152Z"
   },
   {
    "duration": 84,
    "start_time": "2024-02-23T10:07:13.279Z"
   },
   {
    "duration": 15,
    "start_time": "2024-02-23T10:07:29.281Z"
   },
   {
    "duration": 23,
    "start_time": "2024-02-23T10:08:02.171Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-23T10:09:06.847Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-23T10:09:36.772Z"
   },
   {
    "duration": 97,
    "start_time": "2024-02-23T10:09:56.595Z"
   },
   {
    "duration": 15954,
    "start_time": "2024-02-23T10:10:06.221Z"
   },
   {
    "duration": 25551,
    "start_time": "2024-02-23T10:10:50.450Z"
   },
   {
    "duration": 933512,
    "start_time": "2024-02-23T10:11:18.404Z"
   },
   {
    "duration": 55095,
    "start_time": "2024-02-23T10:29:30.134Z"
   },
   {
    "duration": 7460,
    "start_time": "2024-02-23T10:38:03.533Z"
   },
   {
    "duration": 16,
    "start_time": "2024-02-23T10:55:03.234Z"
   },
   {
    "duration": 276,
    "start_time": "2024-02-23T10:55:22.698Z"
   },
   {
    "duration": 18,
    "start_time": "2024-02-23T10:58:48.176Z"
   },
   {
    "duration": 256,
    "start_time": "2024-02-23T10:58:56.750Z"
   },
   {
    "duration": 17,
    "start_time": "2024-02-23T10:59:25.974Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-23T11:00:02.435Z"
   },
   {
    "duration": 298,
    "start_time": "2024-02-23T11:00:18.953Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-23T11:01:22.944Z"
   },
   {
    "duration": 126,
    "start_time": "2024-02-23T11:02:20.847Z"
   },
   {
    "duration": 128,
    "start_time": "2024-02-23T11:03:12.039Z"
   },
   {
    "duration": 100,
    "start_time": "2024-02-23T11:03:19.930Z"
   },
   {
    "duration": 118,
    "start_time": "2024-02-23T11:03:36.726Z"
   },
   {
    "duration": 2333,
    "start_time": "2024-02-23T11:04:43.912Z"
   },
   {
    "duration": 121,
    "start_time": "2024-02-23T11:04:59.647Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-23T11:06:12.841Z"
   },
   {
    "duration": 135,
    "start_time": "2024-02-23T11:06:23.828Z"
   },
   {
    "duration": 123,
    "start_time": "2024-02-23T11:06:50.659Z"
   },
   {
    "duration": 121,
    "start_time": "2024-02-23T11:06:51.346Z"
   },
   {
    "duration": 119,
    "start_time": "2024-02-23T11:06:51.869Z"
   },
   {
    "duration": 118,
    "start_time": "2024-02-23T11:06:52.267Z"
   },
   {
    "duration": 2900,
    "start_time": "2024-02-23T11:07:15.004Z"
   },
   {
    "duration": 2749,
    "start_time": "2024-02-23T11:07:17.906Z"
   },
   {
    "duration": 957,
    "start_time": "2024-02-23T11:07:20.657Z"
   },
   {
    "duration": 41602,
    "start_time": "2024-02-23T11:07:21.617Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T11:08:03.220Z"
   },
   {
    "duration": 1160,
    "start_time": "2024-02-23T11:08:03.224Z"
   },
   {
    "duration": 153,
    "start_time": "2024-02-23T11:08:04.386Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-23T11:08:04.541Z"
   },
   {
    "duration": 39,
    "start_time": "2024-02-23T11:08:04.548Z"
   },
   {
    "duration": 212,
    "start_time": "2024-02-23T11:08:04.589Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-23T11:08:04.803Z"
   },
   {
    "duration": 9,
    "start_time": "2024-02-23T11:08:04.812Z"
   },
   {
    "duration": 418,
    "start_time": "2024-02-23T11:08:13.970Z"
   },
   {
    "duration": 8,
    "start_time": "2024-02-23T11:08:16.532Z"
   },
   {
    "duration": 402,
    "start_time": "2024-02-23T11:09:11.901Z"
   },
   {
    "duration": 145,
    "start_time": "2024-02-23T11:09:49.312Z"
   },
   {
    "duration": 158,
    "start_time": "2024-02-23T11:10:41.503Z"
   },
   {
    "duration": 122,
    "start_time": "2024-02-23T11:10:59.243Z"
   },
   {
    "duration": 302,
    "start_time": "2024-02-23T11:14:17.947Z"
   },
   {
    "duration": 2874,
    "start_time": "2024-02-23T11:14:39.608Z"
   },
   {
    "duration": 2751,
    "start_time": "2024-02-23T11:14:42.485Z"
   },
   {
    "duration": 935,
    "start_time": "2024-02-23T11:14:45.237Z"
   },
   {
    "duration": 42115,
    "start_time": "2024-02-23T11:14:46.174Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T11:15:28.290Z"
   },
   {
    "duration": 1065,
    "start_time": "2024-02-23T11:15:28.295Z"
   },
   {
    "duration": 167,
    "start_time": "2024-02-23T11:15:29.362Z"
   },
   {
    "duration": 6,
    "start_time": "2024-02-23T11:15:29.531Z"
   },
   {
    "duration": 39,
    "start_time": "2024-02-23T11:15:29.539Z"
   },
   {
    "duration": 212,
    "start_time": "2024-02-23T11:15:29.582Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-23T11:15:29.797Z"
   },
   {
    "duration": 413,
    "start_time": "2024-02-23T11:15:29.806Z"
   },
   {
    "duration": 9,
    "start_time": "2024-02-23T11:15:30.221Z"
   },
   {
    "duration": 227,
    "start_time": "2024-02-23T11:15:30.232Z"
   },
   {
    "duration": 406,
    "start_time": "2024-02-23T11:15:30.461Z"
   },
   {
    "duration": 29,
    "start_time": "2024-02-23T11:15:30.868Z"
   },
   {
    "duration": 122,
    "start_time": "2024-02-23T11:15:30.899Z"
   },
   {
    "duration": 177,
    "start_time": "2024-02-23T11:15:31.023Z"
   },
   {
    "duration": 52,
    "start_time": "2024-02-23T11:15:31.202Z"
   },
   {
    "duration": 22,
    "start_time": "2024-02-23T11:15:31.256Z"
   },
   {
    "duration": 211,
    "start_time": "2024-02-23T11:15:31.280Z"
   },
   {
    "duration": 32,
    "start_time": "2024-02-23T11:15:31.493Z"
   },
   {
    "duration": 38,
    "start_time": "2024-02-23T11:15:31.527Z"
   },
   {
    "duration": 208,
    "start_time": "2024-02-23T11:15:31.572Z"
   },
   {
    "duration": 352,
    "start_time": "2024-02-23T11:15:31.782Z"
   },
   {
    "duration": 24,
    "start_time": "2024-02-23T11:26:27.582Z"
   },
   {
    "duration": 80,
    "start_time": "2024-02-23T11:26:48.966Z"
   },
   {
    "duration": 142,
    "start_time": "2024-02-23T11:27:03.470Z"
   },
   {
    "duration": 30,
    "start_time": "2024-02-23T11:27:10.352Z"
   },
   {
    "duration": 51,
    "start_time": "2024-02-23T11:27:24.920Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-23T11:28:45.337Z"
   },
   {
    "duration": 314,
    "start_time": "2024-02-23T11:28:57.052Z"
   },
   {
    "duration": 42,
    "start_time": "2024-02-23T11:29:03.812Z"
   },
   {
    "duration": 353,
    "start_time": "2024-02-23T11:29:10.275Z"
   },
   {
    "duration": 184,
    "start_time": "2024-02-23T11:29:31.221Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-23T11:29:36.321Z"
   },
   {
    "duration": 58,
    "start_time": "2024-02-23T11:29:48.583Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-23T11:30:18.914Z"
   },
   {
    "duration": 57,
    "start_time": "2024-02-23T11:30:26.138Z"
   },
   {
    "duration": 161,
    "start_time": "2024-02-23T12:32:10.670Z"
   },
   {
    "duration": 2878,
    "start_time": "2024-02-23T12:33:00.453Z"
   },
   {
    "duration": 2701,
    "start_time": "2024-02-23T12:33:03.333Z"
   },
   {
    "duration": 938,
    "start_time": "2024-02-23T12:33:06.036Z"
   },
   {
    "duration": 42253,
    "start_time": "2024-02-23T12:33:06.977Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T12:33:49.231Z"
   },
   {
    "duration": 1096,
    "start_time": "2024-02-23T12:33:49.236Z"
   },
   {
    "duration": 150,
    "start_time": "2024-02-23T12:33:50.333Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-23T12:33:50.485Z"
   },
   {
    "duration": 37,
    "start_time": "2024-02-23T12:33:50.491Z"
   },
   {
    "duration": 222,
    "start_time": "2024-02-23T12:33:50.531Z"
   },
   {
    "duration": 6,
    "start_time": "2024-02-23T12:33:50.754Z"
   },
   {
    "duration": 402,
    "start_time": "2024-02-23T12:33:50.761Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-23T12:33:51.164Z"
   },
   {
    "duration": 122,
    "start_time": "2024-02-23T12:33:51.178Z"
   },
   {
    "duration": 340,
    "start_time": "2024-02-23T12:33:51.301Z"
   },
   {
    "duration": 33,
    "start_time": "2024-02-23T12:33:51.642Z"
   },
   {
    "duration": 113,
    "start_time": "2024-02-23T12:33:51.676Z"
   },
   {
    "duration": 145,
    "start_time": "2024-02-23T12:33:51.791Z"
   },
   {
    "duration": 11,
    "start_time": "2024-02-23T12:33:51.938Z"
   },
   {
    "duration": 469,
    "start_time": "2024-02-23T12:33:51.950Z"
   },
   {
    "duration": 26,
    "start_time": "2024-02-23T12:33:52.420Z"
   },
   {
    "duration": 26,
    "start_time": "2024-02-23T12:33:52.448Z"
   },
   {
    "duration": 83,
    "start_time": "2024-02-23T12:33:52.476Z"
   },
   {
    "duration": 9,
    "start_time": "2024-02-23T12:33:52.560Z"
   },
   {
    "duration": 171,
    "start_time": "2024-02-23T12:33:52.572Z"
   },
   {
    "duration": 41,
    "start_time": "2024-02-23T12:33:52.745Z"
   },
   {
    "duration": 33,
    "start_time": "2024-02-23T12:33:52.787Z"
   },
   {
    "duration": 174,
    "start_time": "2024-02-23T12:33:52.823Z"
   },
   {
    "duration": 359,
    "start_time": "2024-02-23T12:33:52.999Z"
   },
   {
    "duration": 26,
    "start_time": "2024-02-23T12:33:53.360Z"
   },
   {
    "duration": 106,
    "start_time": "2024-02-23T12:33:53.388Z"
   },
   {
    "duration": 19,
    "start_time": "2024-02-23T12:33:53.496Z"
   },
   {
    "duration": 619,
    "start_time": "2024-02-23T12:33:53.517Z"
   },
   {
    "duration": 192,
    "start_time": "2024-02-23T12:33:54.138Z"
   },
   {
    "duration": 745,
    "start_time": "2024-02-23T12:33:54.332Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-23T12:33:55.079Z"
   },
   {
    "duration": 251410,
    "start_time": "2024-02-23T12:33:55.084Z"
   },
   {
    "duration": 2091033,
    "start_time": "2024-02-23T12:38:06.497Z"
   },
   {
    "duration": 23081,
    "start_time": "2024-02-23T13:13:09.025Z"
   },
   {
    "duration": 97,
    "start_time": "2024-02-23T13:13:35.912Z"
   },
   {
    "duration": 15,
    "start_time": "2024-02-23T13:14:22.236Z"
   },
   {
    "duration": 1769,
    "start_time": "2024-02-23T13:15:11.121Z"
   },
   {
    "duration": 55,
    "start_time": "2024-02-23T13:15:32.943Z"
   },
   {
    "duration": 3062,
    "start_time": "2024-02-23T13:15:39.098Z"
   },
   {
    "duration": 3075,
    "start_time": "2024-02-23T13:15:42.163Z"
   },
   {
    "duration": 982,
    "start_time": "2024-02-23T13:15:45.240Z"
   },
   {
    "duration": 46222,
    "start_time": "2024-02-23T13:15:46.223Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T13:16:32.447Z"
   },
   {
    "duration": 1195,
    "start_time": "2024-02-23T13:16:32.452Z"
   },
   {
    "duration": 165,
    "start_time": "2024-02-23T13:16:33.648Z"
   },
   {
    "duration": 6,
    "start_time": "2024-02-23T13:16:33.814Z"
   },
   {
    "duration": 25,
    "start_time": "2024-02-23T13:16:33.821Z"
   },
   {
    "duration": 244,
    "start_time": "2024-02-23T13:16:33.848Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-23T13:16:34.094Z"
   },
   {
    "duration": 429,
    "start_time": "2024-02-23T13:16:34.103Z"
   },
   {
    "duration": 8,
    "start_time": "2024-02-23T13:16:34.534Z"
   },
   {
    "duration": 134,
    "start_time": "2024-02-23T13:16:34.544Z"
   },
   {
    "duration": 411,
    "start_time": "2024-02-23T13:16:34.679Z"
   },
   {
    "duration": 165,
    "start_time": "2024-02-23T13:16:43.057Z"
   },
   {
    "duration": 26,
    "start_time": "2024-02-23T13:16:56.950Z"
   },
   {
    "duration": 3147,
    "start_time": "2024-02-23T13:17:32.079Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-23T13:17:35.229Z"
   },
   {
    "duration": 959,
    "start_time": "2024-02-23T13:17:35.235Z"
   },
   {
    "duration": 44798,
    "start_time": "2024-02-23T13:17:36.196Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T13:18:20.996Z"
   },
   {
    "duration": 1160,
    "start_time": "2024-02-23T13:18:21.000Z"
   },
   {
    "duration": 174,
    "start_time": "2024-02-23T13:18:22.162Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-23T13:18:22.338Z"
   },
   {
    "duration": 48,
    "start_time": "2024-02-23T13:18:22.345Z"
   },
   {
    "duration": 543,
    "start_time": "2024-02-23T13:18:22.395Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-23T13:18:22.939Z"
   },
   {
    "duration": 419,
    "start_time": "2024-02-23T13:18:22.947Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-23T13:18:23.372Z"
   },
   {
    "duration": 129,
    "start_time": "2024-02-23T13:18:23.388Z"
   },
   {
    "duration": 404,
    "start_time": "2024-02-23T13:18:23.519Z"
   },
   {
    "duration": 18,
    "start_time": "2024-02-23T13:18:23.925Z"
   },
   {
    "duration": 1704,
    "start_time": "2024-02-23T13:18:23.945Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.651Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.652Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.653Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.654Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.655Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.656Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.658Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.659Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.660Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.661Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.662Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.663Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.664Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.665Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T13:18:25.666Z"
   },
   {
    "duration": 120,
    "start_time": "2024-02-23T13:18:52.137Z"
   },
   {
    "duration": 3024,
    "start_time": "2024-02-23T13:19:17.336Z"
   },
   {
    "duration": 6,
    "start_time": "2024-02-23T13:19:20.363Z"
   },
   {
    "duration": 945,
    "start_time": "2024-02-23T13:19:20.370Z"
   },
   {
    "duration": 45075,
    "start_time": "2024-02-23T13:19:21.318Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-23T13:20:06.396Z"
   },
   {
    "duration": 1190,
    "start_time": "2024-02-23T13:20:06.402Z"
   },
   {
    "duration": 162,
    "start_time": "2024-02-23T13:20:07.594Z"
   },
   {
    "duration": 20,
    "start_time": "2024-02-23T13:20:07.758Z"
   },
   {
    "duration": 36,
    "start_time": "2024-02-23T13:20:07.780Z"
   },
   {
    "duration": 216,
    "start_time": "2024-02-23T13:20:07.818Z"
   },
   {
    "duration": 6,
    "start_time": "2024-02-23T13:20:08.036Z"
   },
   {
    "duration": 451,
    "start_time": "2024-02-23T13:20:08.043Z"
   },
   {
    "duration": 10,
    "start_time": "2024-02-23T13:20:08.495Z"
   },
   {
    "duration": 123,
    "start_time": "2024-02-23T13:20:08.507Z"
   },
   {
    "duration": 396,
    "start_time": "2024-02-23T13:20:08.632Z"
   },
   {
    "duration": 16,
    "start_time": "2024-02-23T13:20:09.030Z"
   },
   {
    "duration": 118,
    "start_time": "2024-02-23T13:20:09.048Z"
   },
   {
    "duration": 154,
    "start_time": "2024-02-23T13:20:09.168Z"
   },
   {
    "duration": 10,
    "start_time": "2024-02-23T13:20:09.323Z"
   },
   {
    "duration": 477,
    "start_time": "2024-02-23T13:20:09.334Z"
   },
   {
    "duration": 28,
    "start_time": "2024-02-23T13:20:09.814Z"
   },
   {
    "duration": 40,
    "start_time": "2024-02-23T13:20:09.844Z"
   },
   {
    "duration": 84,
    "start_time": "2024-02-23T13:20:09.887Z"
   },
   {
    "duration": 14,
    "start_time": "2024-02-23T13:20:09.973Z"
   },
   {
    "duration": 210,
    "start_time": "2024-02-23T13:20:09.993Z"
   },
   {
    "duration": 25,
    "start_time": "2024-02-23T13:20:10.204Z"
   },
   {
    "duration": 58,
    "start_time": "2024-02-23T13:20:10.231Z"
   },
   {
    "duration": 167,
    "start_time": "2024-02-23T13:20:10.292Z"
   },
   {
    "duration": 342,
    "start_time": "2024-02-23T13:20:10.461Z"
   },
   {
    "duration": 25,
    "start_time": "2024-02-23T13:20:10.805Z"
   },
   {
    "duration": 109,
    "start_time": "2024-02-23T13:20:10.831Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-23T13:20:10.942Z"
   },
   {
    "duration": 613,
    "start_time": "2024-02-23T13:20:22.725Z"
   },
   {
    "duration": 193,
    "start_time": "2024-02-23T13:20:37.796Z"
   },
   {
    "duration": 762,
    "start_time": "2024-02-23T13:20:40.094Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T13:20:41.864Z"
   },
   {
    "duration": 420190,
    "start_time": "2024-02-23T13:21:01.520Z"
   },
   {
    "duration": 66,
    "start_time": "2024-02-23T13:28:01.713Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-23T13:28:37.809Z"
   },
   {
    "duration": 172149,
    "start_time": "2024-02-23T13:29:20.830Z"
   },
   {
    "duration": 117206,
    "start_time": "2024-02-23T13:34:20.971Z"
   },
   {
    "duration": 4287535,
    "start_time": "2024-02-23T13:36:18.179Z"
   },
   {
    "duration": 251546,
    "start_time": "2024-02-23T14:48:07.449Z"
   },
   {
    "duration": 8490,
    "start_time": "2024-02-23T14:52:55.116Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T15:04:41.218Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-23T15:05:38.374Z"
   },
   {
    "duration": 11,
    "start_time": "2024-02-23T15:05:55.537Z"
   },
   {
    "duration": 11,
    "start_time": "2024-02-23T15:06:02.922Z"
   },
   {
    "duration": 2848,
    "start_time": "2024-02-23T15:06:29.468Z"
   },
   {
    "duration": 2677,
    "start_time": "2024-02-23T15:06:32.318Z"
   },
   {
    "duration": 932,
    "start_time": "2024-02-23T15:06:34.996Z"
   },
   {
    "duration": 40148,
    "start_time": "2024-02-23T15:06:35.930Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T15:07:16.080Z"
   },
   {
    "duration": 1077,
    "start_time": "2024-02-23T15:07:16.084Z"
   },
   {
    "duration": 152,
    "start_time": "2024-02-23T15:07:17.163Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-23T15:07:17.317Z"
   },
   {
    "duration": 24,
    "start_time": "2024-02-23T15:07:17.324Z"
   },
   {
    "duration": 214,
    "start_time": "2024-02-23T15:07:17.351Z"
   },
   {
    "duration": 6,
    "start_time": "2024-02-23T15:07:17.572Z"
   },
   {
    "duration": 399,
    "start_time": "2024-02-23T15:07:17.580Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-23T15:07:17.981Z"
   },
   {
    "duration": 116,
    "start_time": "2024-02-23T15:07:17.990Z"
   },
   {
    "duration": 350,
    "start_time": "2024-02-23T15:07:18.108Z"
   },
   {
    "duration": 38,
    "start_time": "2024-02-23T15:07:18.460Z"
   },
   {
    "duration": 133,
    "start_time": "2024-02-23T15:07:18.500Z"
   },
   {
    "duration": 149,
    "start_time": "2024-02-23T15:07:18.634Z"
   },
   {
    "duration": 9,
    "start_time": "2024-02-23T15:07:18.785Z"
   },
   {
    "duration": 427,
    "start_time": "2024-02-23T15:07:18.795Z"
   },
   {
    "duration": 25,
    "start_time": "2024-02-23T15:07:19.224Z"
   },
   {
    "duration": 26,
    "start_time": "2024-02-23T15:07:19.251Z"
   },
   {
    "duration": 64,
    "start_time": "2024-02-23T15:07:19.278Z"
   },
   {
    "duration": 8,
    "start_time": "2024-02-23T15:07:19.343Z"
   },
   {
    "duration": 188,
    "start_time": "2024-02-23T15:07:19.352Z"
   },
   {
    "duration": 37,
    "start_time": "2024-02-23T15:07:19.541Z"
   },
   {
    "duration": 32,
    "start_time": "2024-02-23T15:07:19.580Z"
   },
   {
    "duration": 175,
    "start_time": "2024-02-23T15:07:19.615Z"
   },
   {
    "duration": 332,
    "start_time": "2024-02-23T15:07:19.792Z"
   },
   {
    "duration": 88,
    "start_time": "2024-02-23T15:07:20.126Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-23T15:07:20.216Z"
   },
   {
    "duration": 573,
    "start_time": "2024-02-23T15:07:20.222Z"
   },
   {
    "duration": 191,
    "start_time": "2024-02-23T15:07:20.796Z"
   },
   {
    "duration": 726,
    "start_time": "2024-02-23T15:07:20.989Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T15:07:21.717Z"
   },
   {
    "duration": 9072,
    "start_time": "2024-02-23T15:07:21.722Z"
   },
   {
    "duration": 1626693,
    "start_time": "2024-02-23T15:07:30.796Z"
   },
   {
    "duration": 109,
    "start_time": "2024-02-23T15:34:37.491Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:34:37.602Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:34:37.603Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:34:37.604Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:34:37.605Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:34:37.606Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:34:37.607Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:34:37.608Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-23T15:35:13.404Z"
   },
   {
    "duration": 131,
    "start_time": "2024-02-23T15:36:15.967Z"
   },
   {
    "duration": 107,
    "start_time": "2024-02-23T15:37:07.480Z"
   },
   {
    "duration": 100,
    "start_time": "2024-02-23T15:39:01.495Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.597Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.598Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.600Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.602Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.604Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.606Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.607Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.609Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.610Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.611Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.614Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:39:01.615Z"
   },
   {
    "duration": 99,
    "start_time": "2024-02-23T15:39:23.988Z"
   },
   {
    "duration": 578097,
    "start_time": "2024-02-23T15:39:36.224Z"
   },
   {
    "duration": 101,
    "start_time": "2024-02-23T15:49:14.323Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:49:14.426Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:49:14.427Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:49:14.429Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:49:14.430Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:49:14.432Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:49:14.433Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:49:14.435Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:49:14.436Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:49:14.437Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:49:14.439Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:49:14.440Z"
   },
   {
    "duration": 105,
    "start_time": "2024-02-23T15:49:43.516Z"
   },
   {
    "duration": 102,
    "start_time": "2024-02-23T15:49:48.368Z"
   },
   {
    "duration": 2,
    "start_time": "2024-02-23T15:49:53.246Z"
   },
   {
    "duration": 93,
    "start_time": "2024-02-23T15:50:39.323Z"
   },
   {
    "duration": 22061,
    "start_time": "2024-02-23T15:50:39.418Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-23T15:51:01.481Z"
   },
   {
    "duration": 27017,
    "start_time": "2024-02-23T15:51:01.574Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T15:51:28.594Z"
   },
   {
    "duration": 210,
    "start_time": "2024-02-23T15:51:28.599Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:51:28.810Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:51:28.811Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:51:28.813Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T15:51:28.814Z"
   },
   {
    "duration": 10,
    "start_time": "2024-02-23T15:51:48.467Z"
   },
   {
    "duration": 27204,
    "start_time": "2024-02-23T15:52:17.550Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T15:52:44.755Z"
   },
   {
    "duration": 2957,
    "start_time": "2024-02-23T15:58:04.571Z"
   },
   {
    "duration": 2702,
    "start_time": "2024-02-23T15:58:07.531Z"
   },
   {
    "duration": 924,
    "start_time": "2024-02-23T15:58:10.234Z"
   },
   {
    "duration": 43516,
    "start_time": "2024-02-23T15:58:11.160Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T15:58:54.679Z"
   },
   {
    "duration": 1052,
    "start_time": "2024-02-23T15:58:54.684Z"
   },
   {
    "duration": 151,
    "start_time": "2024-02-23T15:58:55.737Z"
   },
   {
    "duration": 6,
    "start_time": "2024-02-23T15:58:55.890Z"
   },
   {
    "duration": 24,
    "start_time": "2024-02-23T15:58:55.898Z"
   },
   {
    "duration": 254,
    "start_time": "2024-02-23T15:58:55.924Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-23T15:58:56.179Z"
   },
   {
    "duration": 392,
    "start_time": "2024-02-23T15:58:56.187Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-23T15:58:56.581Z"
   },
   {
    "duration": 115,
    "start_time": "2024-02-23T15:58:56.591Z"
   },
   {
    "duration": 382,
    "start_time": "2024-02-23T15:58:56.707Z"
   },
   {
    "duration": 27,
    "start_time": "2024-02-23T15:58:57.091Z"
   },
   {
    "duration": 153,
    "start_time": "2024-02-23T15:58:57.120Z"
   },
   {
    "duration": 148,
    "start_time": "2024-02-23T15:58:57.274Z"
   },
   {
    "duration": 9,
    "start_time": "2024-02-23T15:58:57.424Z"
   },
   {
    "duration": 426,
    "start_time": "2024-02-23T15:58:57.435Z"
   },
   {
    "duration": 38,
    "start_time": "2024-02-23T15:58:57.863Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-23T15:58:57.903Z"
   },
   {
    "duration": 89,
    "start_time": "2024-02-23T15:58:57.918Z"
   },
   {
    "duration": 9,
    "start_time": "2024-02-23T15:58:58.008Z"
   },
   {
    "duration": 180,
    "start_time": "2024-02-23T15:58:58.018Z"
   },
   {
    "duration": 32,
    "start_time": "2024-02-23T15:58:58.200Z"
   },
   {
    "duration": 51,
    "start_time": "2024-02-23T15:58:58.233Z"
   },
   {
    "duration": 176,
    "start_time": "2024-02-23T15:58:58.286Z"
   },
   {
    "duration": 320,
    "start_time": "2024-02-23T15:58:58.464Z"
   },
   {
    "duration": 91,
    "start_time": "2024-02-23T15:58:58.785Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T15:58:58.878Z"
   },
   {
    "duration": 591,
    "start_time": "2024-02-23T15:58:58.883Z"
   },
   {
    "duration": 192,
    "start_time": "2024-02-23T15:58:59.475Z"
   },
   {
    "duration": 731,
    "start_time": "2024-02-23T15:58:59.669Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T15:59:00.401Z"
   },
   {
    "duration": 27344,
    "start_time": "2024-02-23T16:00:01.465Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-23T16:00:28.811Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T16:00:28.826Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T16:00:28.828Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T16:00:28.829Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T16:00:28.831Z"
   },
   {
    "duration": 0,
    "start_time": "2024-02-23T16:00:28.832Z"
   },
   {
    "duration": 26936,
    "start_time": "2024-02-23T16:01:22.423Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T16:01:49.361Z"
   },
   {
    "duration": 965589,
    "start_time": "2024-02-23T16:01:49.373Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T16:17:54.964Z"
   },
   {
    "duration": 58918,
    "start_time": "2024-02-23T16:17:54.970Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T16:18:53.890Z"
   },
   {
    "duration": 30,
    "start_time": "2024-02-23T16:18:53.894Z"
   },
   {
    "duration": 921672,
    "start_time": "2024-02-23T16:34:23.819Z"
   },
   {
    "duration": 651,
    "start_time": "2024-02-23T16:49:59.954Z"
   },
   {
    "duration": 626,
    "start_time": "2024-02-23T16:50:18.716Z"
   },
   {
    "duration": 638,
    "start_time": "2024-02-23T16:50:32.007Z"
   },
   {
    "duration": 12,
    "start_time": "2024-02-23T17:01:33.337Z"
   },
   {
    "duration": 5,
    "start_time": "2024-02-23T17:02:01.605Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-23T17:02:08.543Z"
   },
   {
    "duration": 14,
    "start_time": "2024-02-23T17:02:19.278Z"
   },
   {
    "duration": 7,
    "start_time": "2024-02-23T17:02:30.683Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-23T17:09:48.372Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-23T17:11:51.178Z"
   },
   {
    "duration": 11,
    "start_time": "2024-02-23T17:12:02.133Z"
   },
   {
    "duration": 3110,
    "start_time": "2024-02-23T17:27:03.107Z"
   },
   {
    "duration": 20160,
    "start_time": "2024-02-23T17:27:10.179Z"
   },
   {
    "duration": 18,
    "start_time": "2024-02-23T17:30:39.456Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-23T17:30:58.034Z"
   },
   {
    "duration": 54,
    "start_time": "2024-02-23T17:30:59.680Z"
   },
   {
    "duration": 21809,
    "start_time": "2024-02-23T17:31:05.226Z"
   },
   {
    "duration": 27027,
    "start_time": "2024-02-24T09:50:33.147Z"
   },
   {
    "duration": 4077,
    "start_time": "2024-02-24T09:51:00.177Z"
   },
   {
    "duration": 97,
    "start_time": "2024-02-24T09:51:04.281Z"
   },
   {
    "duration": 3200,
    "start_time": "2024-02-24T09:51:04.380Z"
   },
   {
    "duration": 42401,
    "start_time": "2024-02-24T09:51:07.582Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-24T09:51:49.984Z"
   },
   {
    "duration": 1091,
    "start_time": "2024-02-24T09:51:49.989Z"
   },
   {
    "duration": 152,
    "start_time": "2024-02-24T09:51:51.082Z"
   },
   {
    "duration": 6,
    "start_time": "2024-02-24T09:51:51.236Z"
   },
   {
    "duration": 40,
    "start_time": "2024-02-24T09:51:51.245Z"
   },
   {
    "duration": 216,
    "start_time": "2024-02-24T09:51:51.287Z"
   },
   {
    "duration": 6,
    "start_time": "2024-02-24T09:51:51.504Z"
   },
   {
    "duration": 390,
    "start_time": "2024-02-24T09:51:51.512Z"
   },
   {
    "duration": 9,
    "start_time": "2024-02-24T09:51:51.903Z"
   },
   {
    "duration": 114,
    "start_time": "2024-02-24T09:51:51.913Z"
   },
   {
    "duration": 374,
    "start_time": "2024-02-24T09:51:52.029Z"
   },
   {
    "duration": 24,
    "start_time": "2024-02-24T09:51:52.405Z"
   },
   {
    "duration": 144,
    "start_time": "2024-02-24T09:51:52.431Z"
   },
   {
    "duration": 136,
    "start_time": "2024-02-24T09:51:52.577Z"
   },
   {
    "duration": 9,
    "start_time": "2024-02-24T09:51:52.714Z"
   },
   {
    "duration": 428,
    "start_time": "2024-02-24T09:51:52.725Z"
   },
   {
    "duration": 38,
    "start_time": "2024-02-24T09:51:53.155Z"
   },
   {
    "duration": 13,
    "start_time": "2024-02-24T09:51:53.195Z"
   },
   {
    "duration": 81,
    "start_time": "2024-02-24T09:51:53.209Z"
   },
   {
    "duration": 9,
    "start_time": "2024-02-24T09:51:53.292Z"
   },
   {
    "duration": 185,
    "start_time": "2024-02-24T09:51:53.303Z"
   },
   {
    "duration": 32,
    "start_time": "2024-02-24T09:51:53.490Z"
   },
   {
    "duration": 32,
    "start_time": "2024-02-24T09:51:53.526Z"
   },
   {
    "duration": 191,
    "start_time": "2024-02-24T09:51:53.559Z"
   },
   {
    "duration": 322,
    "start_time": "2024-02-24T09:51:53.751Z"
   },
   {
    "duration": 86,
    "start_time": "2024-02-24T09:51:54.074Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-24T09:51:54.162Z"
   },
   {
    "duration": 676,
    "start_time": "2024-02-24T09:51:54.167Z"
   },
   {
    "duration": 197,
    "start_time": "2024-02-24T09:51:54.845Z"
   },
   {
    "duration": 748,
    "start_time": "2024-02-24T09:51:55.044Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-24T09:51:55.794Z"
   },
   {
    "duration": 10399,
    "start_time": "2024-02-24T09:51:55.799Z"
   },
   {
    "duration": 1389303,
    "start_time": "2024-02-24T09:52:06.199Z"
   },
   {
    "duration": 4,
    "start_time": "2024-02-24T10:15:15.503Z"
   },
   {
    "duration": 52812,
    "start_time": "2024-02-24T10:15:15.580Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-24T10:16:08.394Z"
   },
   {
    "duration": 139,
    "start_time": "2024-02-24T10:16:08.398Z"
   },
   {
    "duration": 17648,
    "start_time": "2024-02-24T10:16:08.538Z"
   },
   {
    "duration": 92,
    "start_time": "2024-02-24T10:16:26.189Z"
   },
   {
    "duration": 26876,
    "start_time": "2024-02-24T10:16:26.283Z"
   },
   {
    "duration": 2,
    "start_time": "2024-02-24T10:16:53.161Z"
   },
   {
    "duration": 956881,
    "start_time": "2024-02-24T10:16:53.165Z"
   },
   {
    "duration": 3,
    "start_time": "2024-02-24T10:32:50.048Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
